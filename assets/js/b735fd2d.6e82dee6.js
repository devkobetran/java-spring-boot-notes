"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[4758],{5903:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=l(4848),o=l(8453);const r={sidebar_position:7},s="Spring MVC CRUD",i={id:"tutorial/spring-mvc-crud",title:"Spring MVC CRUD",description:"- Example: Create a Web UI for the Employee Directory",source:"@site/docs/tutorial/spring-mvc-crud.md",sourceDirName:"tutorial",slug:"/tutorial/spring-mvc-crud",permalink:"/java-spring-boot-notes/docs/tutorial/spring-mvc-crud",draft:!1,unlisted:!1,editUrl:"https://github.com/kotran222/java-spring-boot-notes/docs/tutorial/spring-mvc-crud.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Spring MVC",permalink:"/java-spring-boot-notes/docs/tutorial/spring-mvc"},next:{title:"Spring MVC Security",permalink:"/java-spring-boot-notes/docs/tutorial/spring-mvc-security"}},a={},d=[{value:"Project Setup",id:"project-setup",level:2},{value:"Development Process",id:"development-process",level:3},{value:"Thymeleaf - Get Employee",id:"thymeleaf---get-employee",level:2},{value:"Thymeleaf - Add Employee",id:"thymeleaf---add-employee",level:2},{value:"Thymeleaf - Update Employee",id:"thymeleaf---update-employee",level:2},{value:"Thymeleaf - Delete Employee",id:"thymeleaf---delete-employee",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"spring-mvc-crud",children:"Spring MVC CRUD"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Example: Create a Web UI for the Employee Directory"}),"\n",(0,t.jsx)(n.li,{children:"Use Thymeleaf + Spring Boot"}),"\n",(0,t.jsxs)(n.li,{children:["Users should be able to","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Get a list of employees"}),"\n",(0,t.jsx)(n.li,{children:"Add a new employee"}),"\n",(0,t.jsx)(n.li,{children:"Update an employee"}),"\n",(0,t.jsx)(n.li,{children:"Delete an employee"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart LR\n\nA[Web Browser] --\x3e B[Employee Controller]\nB --\x3e C[Employee Service]\nC --\x3e B\n\nC --\x3e D[Employee Repository]\nD --\x3e C\n\nD --\x3e E[(Database)]\nE --\x3e D\n\nB --\x3e F[Thymeleaf Templates]\nF --\x3e A\n\nstyle A fill:orange,color:white;\nstyle B fill:green,color:white;\nstyle C fill:red,color:white;\nstyle D fill:purple,color:white;\nstyle E fill:grey,stroke:black,color:white;\nstyle F fill:white,color:black;"}),"\n",(0,t.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"We will extend our existing Employee project and add DB integration"}),"\n",(0,t.jsxs)(n.li,{children:["Add EmployeeService, EmployeeRepository and Employee entity","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Available in one of our previous projects"}),"\n",(0,t.jsx)(n.li,{children:"We created all of this code already from scratch ... so we'll just copy/paste it"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Allows us to focus on creating EmployeeController and Thymeleaf templates"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"development-process",children:"Development Process"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Get list of employees"}),"\n",(0,t.jsx)(n.li,{children:"Add a new employee"}),"\n",(0,t.jsx)(n.li,{children:"Update an existing employee"}),"\n",(0,t.jsx)(n.li,{children:"Delete an existing employee"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"thymeleaf---get-employee",children:"Thymeleaf - Get Employee"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a Spring MVC Controller"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"EmployeeController.java"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:' @Controller\n @RequestMapping("/employees") //base mapping for url requests\n public class EmployeeController {\n    private EmployeeService employeeService;\n\n     // this uses constructor injection\n    public EmployeeController(EmployeeService theEmployeeService){\n      employeeService = theEmployeeService;\n    }\n\n    // add mapping for "/list"\n    @GetMapping("/list")\n    public String listEmployees(Model theModel){\n      // get the employee from db\n      List<Employee> theEmployees = employeeService.findAll();\n\n      // add to the spring model\n      theModel.addAttribute("employees", theEmployees);\n\n      return "employees/list-employees";\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Create html file in thymeleaf"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"list.employees.html"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- This will use bootstrap styles --\x3e\n\n<div class="container">\n  <h3>Employee Directory</h3>\n\n  <hr />\n\n  <table class="table table-bordered table-striped">\n    <thead class="table-dark">\n      <tr>\n        <th>First Name</th>\n        <th>Last Name</th>\n        <th>Email</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      <tr th:each="tempEmployee : ${employees}">\n        <td th:text="${tempEmployee.firstName}"></td>\n        <td th:text="${tempEmployee.lastName}"></td>\n        <td th:text="${tempEmployee.email}"></td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["Add ",(0,t.jsx)(n.strong,{children:"index.html"}),' to redirect to "employees/list"']}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"URL='employees/list'"})," is a html trick that will auto redirect to another url"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<meta http-equiv="refresh" content="0; URL=\'employees/list\'" />\n'})}),"\n",(0,t.jsx)(n.h2,{id:"thymeleaf---add-employee",children:"Thymeleaf - Add Employee"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"New Add Employee button for list-employees.html"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Add Employee button will href link to","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["request mapping ",(0,t.jsx)(n.code,{children:"/employees/showFormForAdd"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- @ symbol Reference context path of your application (app root) --\x3e\n<a th:href="@{/employees/showFormForAdd}" class="btn btn-primary btn-sm mb-3">\n  Add Employee\n</a>\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Controller"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:' @Controller\n @RequestMapping("/employees") //base mapping for url requests\n public class EmployeeController {\n    ...\n\n   @GetMapping("/showFormForAdd")\n   public String showFormForAdd(Model theModel) {\n\n     // create model attribute to bind form data\n     Employee theEmployee = new Employee();\n     theModel.addAttribute("employee", theEmployee);\n\n    // Our Thymleaf template will access this data for binding form data\n    // src/main/resources/templates/employees/employee-form.html\n     return "employees/employee-form";\n   }\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Thymeleaf has special expressions for binding Spring MVC form data"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Automatically setting / retrieving data from a Java object"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Thymeleaf Expressions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"th:action"}),": Location to send form data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"th:object"}),": Reference to model attribute"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"th:field"}),": Bind input field to a property on model attribute"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#creating-a-form",children:"thymeleaf-expressions"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Create HTML form for new employee"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'\x3c!-- # is an Empty place holder. Thymeleaf will handle real work --\x3e\n\x3c!-- Real work. Send form data to /employees/save --\x3e\n<form\n  action="#"\n  th:action="@{/employees/save}"\n  th:object="${employee}"\n  method="POST"\n>\n  \x3c!-- *{...} Selects property on referenced th:object --\x3e\n  <input\n    type="text"\n    th:field="*{firstName}"\n    placeholder="First name"\n    class="form-control mb-4 w-25"\n  />\n\n  <input\n    type="text"\n    th:field="*{lastName}"\n    placeholder="Last name"\n    class="form-control mb-4 w-25"\n  />\n\n  <input\n    type="text"\n    th:field="*{email}"\n    placeholder="Email"\n    class="form-control mb-4 w-25"\n  />\n\n  <button type="submit" class="btn btn-info col-2">Save</button>\n</form>\n\n<hr />\n\n\x3c!-- Back to Employees List Button --\x3e\n<a th:href="@{/employees/list}">Back to Employees List</a>\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"this html corresponds to the model attribute in the controller:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'theModel.addAttribute("employee", theEmployee);\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Process form data to save employee"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Controller\n@RequestMapping("/employees")\npublic class EmployeeController {\n    ...\n\n    // this ModelAttribute connects with thymeleaf\n    @PostMapping("/save")\n    public String saveEmployee(@ModelAttribute("employee") Employee theEmployee) {\n        // save the employee\n        employeeService.save(theEmployee);\n        // use a redirect to prevent duplicate submissions\n        return "redirect:/employees/list";\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"thymeleaf---update-employee",children:"Thymeleaf - Update Employee"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'"Update" button'}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Update button includes employee id"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<tr th:each="tempEmployee : ${employees}">\n  ...\n  <td>\n    \x3c!-- employeeId  is appended to the url --\x3e\n    <a\n      th:href="@{/employees/showFormForUpdate(employeeId=${tempEmployee.id})}"\n      class="btn btn-info btn-sm"\n    >\n      Update\n    </a>\n  </td>\n</tr>\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Pre-populate the form"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Controller\n@RequestMapping("/employees")\npublic class EmployeeController {\n...\n\n    //employeeId RequestParam corresponds to html above\n  @GetMapping("/showFormForUpdate")\n  public String showFormForUpdate(@RequestParam("employeeId") int theId, Model theModel) {\n    // get the employee from the service\n    Employee theEmployee = employeeService.findById(theId);\n\n    // set employee as a model attribute to pre-populate the form\n    theModel.addAttribute("employee", theEmployee);\n\n    // send over to our form\n    return "employees/employee-form";\n  }\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<form\n  action="#"\n  th:action="@{/employees/save}"\n  th:object="${employee}"\n  method="POST"\n>\n  \x3c!-- Add hidden form field to handle update --\x3e\n  <input type="hidden" th:field="*{id}" />\n\n  <input\n    type="text"\n    th:field="*{firstName}"\n    class="form-control mb-4 w-25"\n    placeholder="First name"\n  />\n\n  <input\n    type="text"\n    th:field="*{lastName}"\n    class="form-control mb-4 w-25"\n    placeholder="Last name"\n  />\n\n  <input\n    type="text"\n    th:field="*{email}"\n    class="form-control mb-4 w-25"\n    placeholder="Email"\n  />\n\n  <button type="submit" class="btn btn-info col-2">Save</button>\n</form>\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Process form data"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"reuse our existing code"}),"\n",(0,t.jsx)(n.li,{children:"Works the same for add or update"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Controller\n@RequestMapping("/employees")\npublic class EmployeeController {\n  ...\n  @PostMapping("/save")\n  public String saveEmployee(@ModelAttribute("employee") Employee theEmployee) {\n\n     // save the employee\n     employeeService.save(theEmployee);\n\n     // use a redirect to prevent duplicate submissions\n     return "redirect:/employees/list";\n  }\n...\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"thymeleaf---delete-employee",children:"Thymeleaf - Delete Employee"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Add \u201cDelete\u201d button/link on page"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<tr th:each="tempEmployee : ${employees}">\n  ...\n  <td>\n    \x3c!-- employeeId Appends to URL --\x3e\n    <a\n      th:href="@{/employees/delete(employeeId=${tempEmployee.id})}"\n      class="btn btn-danger btn-sm"\n      onclick="if (!(confirm(\'Are you sure you want to delete this employee?\'))) return false"\n    >\n      Delete\n    </a>\n  </td>\n</tr>\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"onclick"})," uses javascript to prompt user before deleting"]})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Add controller code for \u201cDelete\u201d"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'@Controller\n@RequestMapping("/employees")\npublic class EmployeeController {\n  ...\n  // employeeId corresponds to the a tag in thymeleaf above\n  @GetMapping("/delete")\n  public String delete(@RequestParam("employeeId") int theId) {\n    // delete the employee\n    employeeService.deleteById(theId);\n    // redirect to /employees/list\n    return "redirect:/employees/list";\n  }\n}\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>i});var t=l(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
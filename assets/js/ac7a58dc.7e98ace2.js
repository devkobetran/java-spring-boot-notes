"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[1623],{2795:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});var s=i(4848),r=i(8453);const l={sidebar_position:10},c="AOP: Aspect-Oriented Programming",t={id:"tutorial/aspect-oriented-programming",title:"AOP: Aspect-Oriented Programming",description:"DAO - Add Logging Code and Security Code",source:"@site/docs/tutorial/aspect-oriented-programming.md",sourceDirName:"tutorial",slug:"/tutorial/aspect-oriented-programming",permalink:"/java-spring-boot-notes/docs/tutorial/aspect-oriented-programming",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/java-spring-boot-notes/docs/tutorial/aspect-oriented-programming.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"JPA | Hibernate Advanced Mappings",permalink:"/java-spring-boot-notes/docs/tutorial/jpa-hibernate-advanced-mappings"}},o={},d=[{value:"DAO - Add Logging Code and Security Code",id:"dao---add-logging-code-and-security-code",level:2},{value:"Two Main Issues",id:"two-main-issues",level:2},{value:"Solution: Aspect-Oriented Programming",id:"solution-aspect-oriented-programming",level:2},{value:"Benefits of AOP",id:"benefits-of-aop",level:3},{value:"Additional AOP Use Cases",id:"additional-aop-use-cases",level:3},{value:"AOP: Advantages and Disadvantages",id:"aop-advantages-and-disadvantages",level:3},{value:"Spring AOP Support",id:"spring-aop-support",level:2},{value:"Advice Types",id:"advice-types",level:3},{value:"Weaving",id:"weaving",level:2},{value:"AOP Frameworks",id:"aop-frameworks",level:2},{value:"@Before Advice",id:"before-advice",level:2},{value:"Advice Types",id:"advice-types-1",level:3},{value:"Spring Boot AOP Starter",id:"spring-boot-aop-starter",level:3},{value:"Best Practices: Aspect and Advices",id:"best-practices-aspect-and-advices",level:3},{value:"AOP - Pointcut Expressions",id:"aop---pointcut-expressions",level:2},{value:"Pointcut Expression Language",id:"pointcut-expression-language",level:3},{value:"Pointcut Expression Examples",id:"pointcut-expression-examples",level:3},{value:"Match on Parameters",id:"match-on-parameters",level:2},{value:"Parameter Pattern Wildcards",id:"parameter-pattern-wildcards",level:3},{value:"Pointcut Expression Examples",id:"pointcut-expression-examples-1",level:3},{value:"Match on Package",id:"match-on-package",level:3},{value:"Pointcut Declarations",id:"pointcut-declarations",level:2},{value:"Problem",id:"problem",level:3},{value:"Solution",id:"solution",level:3},{value:"Combine Pointcuts",id:"combine-pointcuts",level:2},{value:"Problem",id:"problem-1",level:3},{value:"Combining Pointcut Expressions",id:"combining-pointcut-expressions",level:3},{value:"Control Aspect Order",id:"control-aspect-order",level:2},{value:"Problem",id:"problem-2",level:3},{value:"To Control Order",id:"to-control-order",level:3},{value:"@Order annotation",id:"order-annotation",level:3},{value:"Reading Method Arguments with JoinPoints",id:"reading-method-arguments-with-joinpoints",level:2},{value:"Problem",id:"problem-3",level:3},{value:"@AfterReturning Advice",id:"afterreturning-advice",level:2},{value:"Advice Types",id:"advice-types-2",level:3},{value:"Example",id:"example",level:3},{value:"@AfterReturning Advice",id:"afterreturning-advice-1",level:3},{value:"Access the Return Value",id:"access-the-return-value",level:3},{value:"@AfterReturning Advice - Modify Return Value",id:"afterreturning-advice---modify-return-value",level:2},{value:"Modify the Return Value",id:"modify-the-return-value",level:3},{value:"@AfterThrowing Advice",id:"afterthrowing-advice",level:2},{value:"Advice Types",id:"advice-types-3",level:3},{value:"Access the Exception",id:"access-the-exception",level:3},{value:"Exception Propagation",id:"exception-propagation",level:3},{value:"@After Advice",id:"after-advice",level:2},{value:"Advice Types",id:"advice-types-4",level:3},{value:"@Around Advice",id:"around-advice",level:2},{value:"Advice Types",id:"advice-types-5",level:3},{value:"ProceedingJoinPoint",id:"proceedingjoinpoint",level:3},{value:"@Around Advice - Handle Exception",id:"around-advice---handle-exception",level:2},{value:"ProceedingJoinPoint",id:"proceedingjoinpoint-1",level:3},{value:"Handle Exception",id:"handle-exception",level:3},{value:"@Around Advice - Rethrow Exception",id:"around-advice---rethrow-exception",level:2},{value:"ProceedingJoinPoint",id:"proceedingjoinpoint-2",level:3},{value:"JoinPoint vs ProceedingJoinPoint",id:"joinpoint-vs-proceedingjoinpoint",level:3},{value:"AOP and Spring MVC",id:"aop-and-spring-mvc",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"aop-aspect-oriented-programming",children:"AOP: Aspect-Oriented Programming"})}),"\n",(0,s.jsx)(n.h2,{id:"dao---add-logging-code-and-security-code",children:"DAO - Add Logging Code and Security Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"public void addAccount(Account theAccount, String userId) {\n\n    entityManager.persist(theAccount);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"two-main-issues",children:"Two Main Issues"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Tangling"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For a given method: ",(0,s.jsx)(n.code,{children:"addAccount(...)"})]}),"\n",(0,s.jsx)(n.li,{children:"We have logging and security code tangled in"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Scattering"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If we need to change logging or security code"}),"\n",(0,s.jsx)(n.li,{children:"We have to update ALL classes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution-aspect-oriented-programming",children:"Solution: Aspect-Oriented Programming"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Programming technique based on concept of an Aspect"}),"\n",(0,s.jsxs)(n.li,{children:["Aspect encapsulates cross-cutting logic","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cross-Cutting Concerns"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:'"Concern" means logic / functionality'}),"\n",(0,s.jsx)(n.li,{children:"Aspects can be reused at multiple locations"}),"\n",(0,s.jsx)(n.li,{children:"Apply the Proxy design pattern"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"benefits-of-aop",children:"Benefits of AOP"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Code for Aspect is defined in a single class","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Much better than being scattered everywhere"}),"\n",(0,s.jsx)(n.li,{children:"Promotes code reuse and easier to change"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Business code in your application is cleaner","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only applies to business functionality: addAccount"}),"\n",(0,s.jsx)(n.li,{children:"Reduces code complexity"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Configurable","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Based on configuration, apply Aspects selectively to different parts of app"}),"\n",(0,s.jsx)(n.li,{children:"No need to make changes to main application code ... very important!"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"additional-aop-use-cases",children:"Additional AOP Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Most common","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"logging, security, transactions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Audit logging","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"who, what, when, where"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Exception handling","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"log exception and notify DevOps team via SMS/email"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["API Management","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"how many times has a method been called user"}),"\n",(0,s.jsx)(n.li,{children:"analytics: what are peak times? what is average load? who is top user?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"aop-advantages-and-disadvantages",children:"AOP: Advantages and Disadvantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Advantages:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reusable modules"}),"\n",(0,s.jsx)(n.li,{children:"Resolve code tangling"}),"\n",(0,s.jsx)(n.li,{children:"Resolve code scatter"}),"\n",(0,s.jsx)(n.li,{children:"Applied selectively based on configuration"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Disadvantages","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Too many aspects and app flow is hard to follow"}),"\n",(0,s.jsx)(n.li,{children:"Minor performance cost for aspect execution (run-time weaving)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-aop-support",children:"Spring AOP Support"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Aspect"}),": module of code for a cross-cutting concern (logging, security, \u2026)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Advice"}),": What action is taken and when it should be applied"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Join Point"}),": When to apply code during program execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pointcut"}),": A predicate expression for where advice should be applied"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advice-types",children:"Advice Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Before advice"}),": run before the method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After finally advice"}),": run after the method (finally)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After returning advice"}),": run after the method (success execution)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After throwing advice"}),": run after method (if exception thrown)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Around advice"}),": run before and after method"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"weaving",children:"Weaving"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connecting aspects to target objects to create an advised object"}),"\n",(0,s.jsxs)(n.li,{children:["Different types of weaving","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Compile-time, load-time or run-time"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Regarding performance: run-time weaving is the slowest"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"aop-frameworks",children:"AOP Frameworks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Spring AOP","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Advantages:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simpler to use than AspectJ"}),"\n",(0,s.jsx)(n.li,{children:"Uses Proxy Pattern"}),"\n",(0,s.jsxs)(n.li,{children:["Can migrate to AspectJ when using ",(0,s.jsx)(n.code,{children:"@Aspect"})," annotation"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Disadvantages:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only supports method-level join points"}),"\n",(0,s.jsx)(n.li,{children:"Can only apply aspects to beans created by Spring app context"}),"\n",(0,s.jsx)(n.li,{children:"Minor performance cost for aspect execution (run-time weaving)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["AspectJ","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Advantages:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Support all join points"}),"\n",(0,s.jsx)(n.li,{children:"Works with any POJO, not just beans from app context"}),"\n",(0,s.jsx)(n.li,{children:"Faster performance compared to Spring AOP"}),"\n",(0,s.jsx)(n.li,{children:"Complete AOP support"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Disadvantages:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Compile-time weaving requires extra compilation step"}),"\n",(0,s.jsx)(n.li,{children:"AspectJ pointcut syntax can become complex"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"before-advice",children:"@Before Advice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use Cases:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Most common","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"logging, security, transactions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Audit logging","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"who, what, when, where"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["API Management","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"how many times has a method been called user"}),"\n",(0,s.jsx)(n.li,{children:"analytics: what are peak times? what is average load? who is top user?"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advice-types-1",children:"Advice Types"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Before advice"}),": run before the method\n",(0,s.jsx)(n.strong,{children:"After returning advice"}),": run after the method (success execution)\n",(0,s.jsx)(n.strong,{children:"After throwing advice"}),": run after method (if exception thrown)\n",(0,s.jsx)(n.strong,{children:"After finally advice"}),": run after the method (finally)\n",(0,s.jsx)(n.strong,{children:"Around advice"}),": run before and after method"]}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-aop-starter",children:"Spring Boot AOP Starter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create target object: AccountDAO"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"public interface AccountDAO {\nvoid addAccount() {\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Component\npublic class AccountDAOImpl implements AccountDAO {\n  public void addAccount() {\n    System.out.println("DOING MY DB WORK: ADDING AN ACCOUNT");\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Create main app"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"@SpringBootApplication\npublic class AopdemoApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(AopdemoApplication.class, args);\n  }\n\n  @Bean\n  public CommandLineRunner commandLineRunner(AccountDAO theAccountDAO) {\n    return runner -> {\n      demoTheBeforeAdvice(theAccountDAO);\n    };\n  }\n\n  private void demoTheBeforeAdvice(AccountDAO theAccountDAO) {\n    // call the business method\n    theAccountDAO.addAccount();\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Create an Aspect with @Before advice"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Aspect\n@Component\npublic class MyDemoLoggingAspect {\n  @Before("execution(public void addAccount())")\n  public void beforeAddAccountAdvice() {\n    System.out.println("Executing @Before advice on addAccount()");\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"best-practices-aspect-and-advices",children:"Best Practices: Aspect and Advices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep the code small"}),"\n",(0,s.jsx)(n.li,{children:"Keep the code fast"}),"\n",(0,s.jsx)(n.li,{children:"Do not perform any expensive / slow operations"}),"\n",(0,s.jsx)(n.li,{children:"Get in and out as QUICKLY as possible"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"aop---pointcut-expressions",children:"AOP - Pointcut Expressions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pointcut"}),": A predicate expression for where advice should be applied"]}),"\n",(0,s.jsx)(n.li,{children:"Spring AOP uses AspectJ\u2019s pointcut expression language"}),"\n",(0,s.jsxs)(n.li,{children:["We will start with execution pointcuts","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Applies to execution of methods"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pointcut-expression-language",children:"Pointcut Expression Language"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"execution(modifiers-pattern? return-type-pattern declaring-type-pattern?\n  method-name-pattern(param-pattern) throws-pattern?)\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The pattern is optional if it has ",(0,s.jsx)(n.code,{children:"?"})]})}),"\n",(0,s.jsx)(n.h3,{id:"pointcut-expression-examples",children:"Pointcut Expression Examples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Match on method names"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Match only ",(0,s.jsx)(n.code,{children:"addAccount()"})," method in ",(0,s.jsx)(n.code,{children:"AccountDAO"})," class"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(public void com.luv2code.aopdemo.dao.AccountDAO.addAccount())")\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match any addAccount() method in any class"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(public void addAccount())")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Match on method names (using wildcards)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match methods starting with add in any class"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(public void add*())\u201d)\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match methods starting with processCreditCard in any class"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(public VerificationResult processCreditCard*())\u201d)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Use wildcards on return type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"@Before(\u201cexecution(public * processCreditCard*())\u201d)\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the ",(0,s.jsx)(n.code,{children:"*"})," in ",(0,s.jsx)(n.code,{children:"public *"})," is the return type"]}),"\n"]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Modifier is optional, so you don\u2019t have to list it"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"@Before(\u201cexecution(* processCreditCard*())\u201d)\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["no need for ",(0,s.jsx)(n.code,{children:"public"})]}),"\n",(0,s.jsxs)(n.li,{children:["the ",(0,s.jsx)(n.code,{children:"*"})," is the return type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"processCreditCard*()"})," is the method in any class"]}),"\n"]})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"match-on-parameters",children:"Match on Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"parameter-pattern-wildcards",children:"Parameter Pattern Wildcards"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For param-pattern","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"()"})," - matches a method with no arguments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"(*)"})," - matches a method with one argument of any type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"(..)"})," - matches a method with 0 or more arguments of any type"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pointcut-expression-examples-1",children:"Pointcut Expression Examples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Match on method parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match addAccount methods with no arguments"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(* addAccount())")\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match addAccount methods that have Account param"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(* addAccount(com.luv2code.aopdemo.Account))")\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Match on method parameters (using wildcards)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match addAccount methods with any number of arguments"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(* addAccount(..))\u201d)\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*"})," is the return type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"addAccount"})," is the method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"(..)"})," is the param type"]}),"\n"]})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"match-on-package",children:"Match on Package"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Match on methods in a package"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Match any method in our DAO package: ",(0,s.jsx)(n.code,{children:"com.luv2code.aopdemo.dao"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(* com.luv2code.aopdemo.dao.*.*(..))")\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*"})," is return type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"com.luv2code.aopdemo.dao"})," is package"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".*.*"}),", first star is class and second star is method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"(..)"})," is param type"]}),"\n"]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When using wildcards with AOP, caution should be taken."}),"\n",(0,s.jsxs)(n.li,{children:["If new frameworks are added to your project, then you may encounter conflicts.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Receive errors in IntelliJ"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Recommendation is to:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"narrow your pointcut expressions"}),"\n",(0,s.jsx)(n.li,{children:"limit them to your project package"}),"\n"]}),"\n"]}),"\n"]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Going back to the match any method in our DAO package: ",(0,s.jsx)(n.code,{children:"com.luv2code.aopdemo.dao"})," example:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Our pointcut expression is too broad."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Resolve this by:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"narrowing the pointcut expression"}),"\n",(0,s.jsx)(n.li,{children:"only match within our project package"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("execution(* com.luv2code..add*(..))")\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"com.luv2code"})," is a narrow pointcut expression"]})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pointcut-declarations",children:"Pointcut Declarations"}),"\n",(0,s.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["How can we reuse a pointcut expression?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Want to apply to multiple advices"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a pointcut declaration once"}),"\n",(0,s.jsx)(n.li,{children:"Apply pointcut declaration to advice(s)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Aspect\n@Component\npublic class MyDemoLoggingAspect {\n  // Create Pointcut Declaration\n  @Pointcut("execution(* com.luv2code.aopdemo.dao.*.*(..))")\n  private void forDaoPackage() {}\n\n  // Apply to Multiple Advices\n  @Before("forDaoPackage()")\n  public void beforeAddAccountAdvice() {\n    ...\n  }\n  @Before("forDaoPackage()")\n  public void performApiAnalytics() {\n    ...\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Benefits of Pointcut Declarations"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Easily reuse pointcut expressions"}),"\n",(0,s.jsx)(n.li,{children:"Update pointcut in one location"}),"\n",(0,s.jsx)(n.li,{children:"Can also share and combine pointcut expressions (coming up later)"}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"combine-pointcuts",children:"Combine Pointcuts"}),"\n",(0,s.jsx)(n.h3,{id:"problem-1",children:"Problem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How to apply multiple pointcut expressions to single advice?"}),"\n",(0,s.jsx)(n.li,{children:"Execute an advice only if certain conditions are met"}),"\n",(0,s.jsxs)(n.li,{children:["For example","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All methods in a package EXCEPT getter/setter methods"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"combining-pointcut-expressions",children:"Combining Pointcut Expressions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Combine pointcut expressions using logic operators","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"AND (&&)"}),"\n",(0,s.jsx)(n.li,{children:"OR (||)"}),"\n",(0,s.jsx)(n.li,{children:"NOT (!)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Works like an \u201cif\u201d statement"}),"\n",(0,s.jsx)(n.li,{children:"Execution happens only if it evaluates to true"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"@Before(\u201cexpressionOne() && expressionTwo()\u201d)\n@Before(\u201cexpressionOne() || expressionTwo()\u201d)\n@Before(\u201cexpressionOne() && !expressionTwo()\u201d)\n"})}),"\n",(0,s.jsx)(n.p,{children:"e.g."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All methods in a package EXCEPT getter/setter methods"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a pointcut declarations"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Pointcut("execution(* com.luv2code.aopdemo.dao.*.*(..))")\nprivate void forDaoPackage() {}\n\n// create pointcut for getter methods\n@Pointcut("execution(* com.luv2code.aopdemo.dao.*.get*(..))")\nprivate void getter() {}\n\n// create pointcut for setter methods\n@Pointcut("execution(* com.luv2code.aopdemo.dao.*.set*(..))")\nprivate void setter() {}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Combine pointcut declarations"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// combine pointcut: include package ... exclude getter/setter\n@Pointcut("forDaoPackage() && !(getter() || setter())")\nprivate void forDaoPackageNoGetterSetter() {}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Apply pointcut declaration to advice(s)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'...\n// combine pointcut: include package ... exclude getter/setter\n@Pointcut("forDaoPackage() && !(getter() || setter())")\nprivate void forDaoPackageNoGetterSetter() {}\n\n@Before("forDaoPackageNoGetterSetter()")\npublic void beforeAddAccountAdvice() {\n...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"control-aspect-order",children:"Control Aspect Order"}),"\n",(0,s.jsx)(n.h3,{id:"problem-2",children:"Problem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"How to control the order of advices being applied?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["MyLoggingDemoAspect","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"beforeAddAccountAdvice"}),"\n",(0,s.jsx)(n.li,{children:"performApiAnalyticsAdvice"}),"\n",(0,s.jsx)(n.li,{children:"logToCloudAdvice"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"to-control-order",children:"To Control Order"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Refactor"}),": Place advices in separate Aspects"]}),"\n",(0,s.jsxs)(n.li,{children:["Control order on Aspects using the ",(0,s.jsx)(n.code,{children:"@Order"})," annotation"]}),"\n",(0,s.jsx)(n.li,{children:"Guarantees order of when Aspects are applied"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Refactor: Place advices in separate Aspects"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"MyLoggingDemoAspect"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"beforeAddAccountAdvice"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"MyApiAnalyticAspect"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"performApiAnalyticsAdvice"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"MyCloudLogAspect"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"logToCloudAdvice"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"@Order"})," annotation to Aspects"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"e.g. We want the following order:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"MyCloudLogAspect"}),"\n",(0,s.jsx)(n.li,{children:"MyLoggingDemoAspect"}),"\n",(0,s.jsx)(n.li,{children:"MyApiAnalyticsAspect"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"@Aspect\n@Component\n@Order(1)\npublic class MyCloudLogAspect {\n  ...\n}\n\n@Aspect\n@Component\n@Order(2)\npublic class MyLoggingDemoAspect {\n  ...\n}\n\n@Aspect\n@Component\n@Order(3)\npublic class MyApiAnalyticsAspect {\n  ...\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Control order on Aspects using the @Order annotation"}),"\n",(0,s.jsx)(n.li,{children:"Guarantees order of when Aspects are applied"}),"\n",(0,s.jsx)(n.li,{children:"Lower numbers have higher precedence"}),"\n"]})}),"\n",(0,s.jsx)(n.h3,{id:"order-annotation",children:"@Order annotation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Lower numbers have higher precedence"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Range: Integer.MIN_VALUE to Integer.MAX_VALUE"}),"\n",(0,s.jsx)(n.li,{children:"Negative numbers are allowed"}),"\n",(0,s.jsx)(n.li,{children:"Does not have to be consecutive"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"What if aspects have the exact same @Order annotation?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"e.g."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Will still run AFTER MyCloudLogAspect\n@Order(1)\npublic class MyCloudLogAspect {...}\n\n// The order at this point is undefined\n@Order(6)\npublic class MyShowAspect { ... }\n@Order(6)\npublic class MyFunnyAspect { ... }\n\n// Will still run BEFORE MyLoggingDemoAspect\n@Order(123)\npublic class MyLoggingDemoAspect { ... }\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"reading-method-arguments-with-joinpoints",children:"Reading Method Arguments with JoinPoints"}),"\n",(0,s.jsx)(n.h3,{id:"problem-3",children:"Problem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When we are in an aspect (ie for logging)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How can we access method parameters?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Access and display Method Signature"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("...")\npublic void beforeAddAccountAdvice(JoinPoint theJoinPoint) {\n  // display the method signature\n  MethodSignature methodSig = (MethodSignature) theJoinPoint.getSignature();\n\n  System.out.println("Method: " + methodSig);\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Access and display Method Arguments"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Before("...")\npublic void beforeAddAccountAdvice(JoinPoint theJoinPoint) {\n  // display method arguments\n\n  // get args\n  Object[] args = theJoinPoint.getArgs();\n\n  // loop thru args\n  for (Object tempArg : args) {\n    System.out.println(tempArg);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"afterreturning-advice",children:"@AfterReturning Advice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Cases:"}),"\n",(0,s.jsxs)(n.li,{children:["Most common","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"logging, security, transactions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Audit logging","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"who, what, when, where"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Post-processing Data","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Post process the data before returning to caller"}),"\n",(0,s.jsx)(n.li,{children:"Format the data or enrich the data (really cool but be careful)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advice-types-2",children:"Advice Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Before advice"}),": run before the method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After returning advice"}),": run after the method (success execution)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After throwing advice"}),": run after method (if exception thrown)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After finally advice"}),": run after the method (finally)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Around advice"}),": run before and after method"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create an advice that will run after a method call (success execution)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"afterreturning-advice-1",children:"@AfterReturning Advice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This advice will run after the method call (success execution)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@AfterReturning("execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))")\npublic void afterReturningFindAccountsAdvice() {\n  System.out.println("Executing @AfterReturning advice");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"access-the-return-value",children:"Access the Return Value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@AfterReturning(\n  pointcut="execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))",\n  returning="result")\npublic void afterReturningFindAccountsAdvice(\n  JoinPoint theJoinPoint, List<Account> result) {\n\n  // print out the results of the method call\n  System.out.println("\\n=====>>> result is: " + result);\n}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"Best Practices: Aspect and Advices"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep the code small"}),"\n",(0,s.jsx)(n.li,{children:"Keep the code fast"}),"\n",(0,s.jsx)(n.li,{children:"Do not perform any expensive / slow operations"}),"\n",(0,s.jsx)(n.li,{children:"Get in and out as QUICKLY as possible"}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Prep Work: Add constructors to Account class"}),"\n",(0,s.jsx)(n.li,{children:"Add new method: findAccounts() in AccountDAO"}),"\n",(0,s.jsx)(n.li,{children:"Update main app to call the new method: findAccounts()"}),"\n",(0,s.jsx)(n.li,{children:"Add @AfterReturning advice"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"afterreturning-advice---modify-return-value",children:"@AfterReturning Advice - Modify Return Value"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Most common","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"logging, security, transactions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Audit logging","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"who, what, when, where"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Post-processing Data","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Post process the data before returning to caller"}),"\n",(0,s.jsx)(n.li,{children:"Format the data or enrich the data (really cool but be careful)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"modify-the-return-value",children:"Modify the Return Value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// Calling program will get the modified result\n@AfterReturning(\n  pointcut="execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))",\n  returning="result")\npublic void afterReturningFindAccountsAdvice(JoinPoint theJoinPoint, List<Account> result) {\n  // modify \u201cresult\u201d list: add, remove, update, etc ...\n  if (!result.isEmpty()) {\n    Account tempAccount = result.get(0);\n    tempAccount.setName("Daffy Duck");\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"afterthrowing-advice",children:"@AfterThrowing Advice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use Cases","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Log the exception"}),"\n",(0,s.jsx)(n.li,{children:"Perform auditing on the exception"}),"\n",(0,s.jsx)(n.li,{children:"Notify DevOps team via email or SMS"}),"\n",(0,s.jsx)(n.li,{children:"Encapsulate this functionality in AOP aspect for easy reuse"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@AfterThrowing("execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))")\npublic void afterThrowingFindAccountsAdvice() {\n  System.out.println("Executing @AfterThrowing advice");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advice-types-3",children:"Advice Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Before advice"}),": run before the method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After returning advice"}),": run after the method (success execution)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After throwing advice"}),": run after method (if exception thrown)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After finally advice"}),": run after the method (finally)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Around advice"}),": run before and after method"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"access-the-exception",children:"Access the Exception"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@AfterThrowing(\npointcut="execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))",\nthrowing="theExc")\npublic void afterThrowingFindAccountsAdvice(JoinPoint theJoinPoint, Throwable theExc) {\n  // log the exception\n  System.out.println("\\n=====>>> The exception is: " + theExc);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"exception-propagation",children:"Exception Propagation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"At this point, we are only intercepting the exception (reading it)"}),"\n",(0,s.jsx)(n.li,{children:"However, the exception is still propagated to calling program"}),"\n",(0,s.jsxs)(n.li,{children:["If you want to stop the exception propagation","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["then use the ",(0,s.jsx)(n.code,{children:"@Around"})," advice"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process - @AfterThrowing"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"In Main App, add a try/catch block for exception handling"}),"\n",(0,s.jsx)(n.li,{children:"Modify AccountDAO to simulate throwing an exception"}),"\n",(0,s.jsx)(n.li,{children:"Add @AfterThrowing advice"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"after-advice",children:"@After Advice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Log the exception and/or perform auditing"}),"\n",(0,s.jsx)(n.li,{children:"Code to run regardless of method outcome"}),"\n",(0,s.jsx)(n.li,{children:"Encapsulate this functionality in AOP aspect for easy reuse"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"This advice will run after the method (finally \u2026 success/failure)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@After("execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))")\npublic void afterFinallyFindAccountsAdvice() {\n  System.out.println("Executing @After (finally) advice");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advice-types-4",children:"Advice Types"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Before advice"}),": run before the method\n",(0,s.jsx)(n.strong,{children:"After returning advice"}),": run after the method (success execution)\n",(0,s.jsx)(n.strong,{children:"After throwing advice"}),": run after method (if exception thrown)\n",(0,s.jsx)(n.strong,{children:"After finally advice"}),": run after the method (finally)\n",(0,s.jsx)(n.strong,{children:"Around advice"}),": run before and after method"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"@After"})," advice does not have access to the exception","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you need exception, then use ",(0,s.jsx)(n.code,{children:"@AfterThrowing"})," advice"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"@After advice"})," should be able to run in the case of success or error","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Your code should not depend on happy path or an exception"}),"\n",(0,s.jsx)(n.li,{children:"Logging / auditing is the easiest case here"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process - @After"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Prep work"}),"\n",(0,s.jsx)(n.li,{children:"Add @After advice"}),"\n",(0,s.jsx)(n.li,{children:"Test for failure/exception case"}),"\n",(0,s.jsx)(n.li,{children:"Test for success case"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"around-advice",children:"@Around Advice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@Around"}),": Like a combination of ",(0,s.jsx)(n.code,{children:"@Before"})," and ",(0,s.jsx)(n.code,{children:"@After"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"But gives you more fine-grained control"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Use Cases:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Most common: logging, auditing, security"}),"\n",(0,s.jsx)(n.li,{children:"Pre-processing and post-processing data"}),"\n",(0,s.jsxs)(n.li,{children:["Instrumentation / profiling code","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"How long does it take for a section of code to run?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Managing exceptions","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Swallow / handle / stop exceptions"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Around("execution(* com.luv2code.aopdemo.service.*.getFortune(..))")\npublic Object afterGetFortune(ProceedingJoinPoint theProceedingJoinPoint) throws Throwable {\n  // get begin timestamp\n  long begin = System.currentTimeMillis();\n\n  // now, let\'s execute the method\n  Object result = theProceedingJoinPoint.proceed();\n\n  // get end timestamp\n  long end = System.currentTimeMillis();\n\n  // compute duration and display it\n  long duration = end - begin;\n  System.out.println("\\n=====> Duration: " + duration + " milliseconds");\n\n  return result;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advice-types-5",children:"Advice Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Before advice"}),": run before the method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After returning advice"}),": run after the method (success execution)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After throwing advice"}),": run after method (if exception thrown)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"After finally advice"}),": run after the method (finally)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Around advice"}),": run before and after method"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"proceedingjoinpoint",children:"ProceedingJoinPoint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When using ",(0,s.jsx)(n.code,{children:"@Around"})," advice"]}),"\n",(0,s.jsx)(n.li,{children:"You will get a reference to a \u201cproceeding join point\u201d"}),"\n",(0,s.jsx)(n.li,{children:"This is a handle to the target method"}),"\n",(0,s.jsx)(n.li,{children:"Your code can use the proceeding join point to execute target method"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process - @Around"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create TrafficFortuneService"}),"\n",(0,s.jsx)(n.li,{children:"Update main app to call TrafficFortuneService"}),"\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"@Around"})," advice"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"around-advice---handle-exception",children:"@Around Advice - Handle Exception"}),"\n",(0,s.jsx)(n.h3,{id:"proceedingjoinpoint-1",children:"ProceedingJoinPoint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For an exception thrown from proceeding join point","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can handle / swallow /stop the exception"}),"\n",(0,s.jsx)(n.li,{children:"Or you can simply rethrow the exception"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"This gives you fine-grained control over how the target method is called"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"handle-exception",children:"Handle Exception"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Around("execution(* com.luv2code.aopdemo.service.*.getFortune(..))")\npublic Object afterGetFortune(ProceedingJoinPoint theProceedingJoinPoint) throws Throwable {\n  Object result = null;\n\n  try {\n    // let\'s execute the method\n    result = theProceedingJoinPoint.proceed();\n  } catch (Exception exc) {\n    // log exception\n    System.out.println("@Around advice: We have a problem " + exc);\n\n    // handle and give default fortune ... use this approach with caution\n    result = "Nothing exciting here. Move along!";\n  }\n\n  return result;\u2000\u2000\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process - @Around"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add trip wire to simulate an exception"}),"\n",(0,s.jsx)(n.li,{children:"Modify @Around advice to handle exception"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"around-advice---rethrow-exception",children:"@Around Advice - Rethrow Exception"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Around("execution(* com.luv2code.aopdemo.service.*.getFortune(..))")\npublic Object afterGetFortune(ProceedingJoinPoint theProceedingJoinPoint) throws Throwable {\n  try {\n    // let\'s execute the method\n    Object result = theProceedingJoinPoint.proceed();\n    return result;\n  }\n  catch (Exception exc) {\n    // log exception\n    System.out.println("@Around advice: We have a problem " + exc);\n\n    // rethrow it\n    throw exc;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"proceedingjoinpoint-2",children:"ProceedingJoinPoint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For an exception thrown from proceeding join point","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can handle / swallow /stop the exception"}),"\n",(0,s.jsx)(n.li,{children:"Or you can simply rethrow the exception"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"joinpoint-vs-proceedingjoinpoint",children:"JoinPoint vs ProceedingJoinPoint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"JoinPoint"})," with following advice types:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@Before"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@After"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@AfterReturning"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@AfterThrowing"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"ProceedingJoinPoint"})," with following advice type","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"@Around"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"aop-and-spring-mvc",children:"AOP and Spring MVC"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Goal: add AOP Logging support to our Spring MVC CRUD app"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add Spring Boot AOP Starter to Maven pom file"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Spring Boot will automatically enable support for AOP"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Create Aspect"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add logging support"}),"\n",(0,s.jsx)(n.li,{children:"Setup pointcut declarations"}),"\n",(0,s.jsx)(n.li,{children:"Add @Before advice"}),"\n",(0,s.jsx)(n.li,{children:"Add @AfterReturning advice"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var s=i(6540);const r={},l=s.createContext(r);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[308],{1527:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=s(4848),t=s(8453);const r={sidebar_position:4},l="REST CRUD APIs",o={id:"tutorial/rest-crud-apis",title:"REST CRUD APIs",description:"REST API",source:"@site/docs/tutorial/rest-crud-apis.md",sourceDirName:"tutorial",slug:"/tutorial/rest-crud-apis",permalink:"/java-spring-boot-notes/docs/tutorial/rest-crud-apis",draft:!1,unlisted:!1,editUrl:"https://github.com/kotran222/java-spring-boot-notes/docs/tutorial/rest-crud-apis.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Hibernate | JPA CRUD",permalink:"/java-spring-boot-notes/docs/tutorial/hibernate-jpa-crud"},next:{title:"REST API Security",permalink:"/java-spring-boot-notes/docs/tutorial/rest-api-security"}},a={},d=[{value:"REST API",id:"rest-api",level:2},{value:"JSON Example",id:"json-example",level:2},{value:"REST over HTTP",id:"rest-over-http",level:2},{value:"HTTP Messages",id:"http-messages",level:2},{value:"HTTP Request Message",id:"http-request-message",level:3},{value:"HTTP Response Message",id:"http-response-message",level:3},{value:"HTTP Response - Status Codes",id:"http-response---status-codes",level:3},{value:"MIME Content Types",id:"mime-content-types",level:3},{value:"Postman",id:"postman",level:3},{value:"Spring REST Controller",id:"spring-rest-controller",level:2},{value:"Spring REST Controller - Dev Process",id:"spring-rest-controller---dev-process",level:2},{value:"Java JSON Data Binding",id:"java-json-data-binding",level:2},{value:"Spring REST Service - Students example",id:"spring-rest-service---students-example",level:2},{value:"Path Variables &amp; @PathVariable",id:"path-variables--pathvariable",level:3},{value:"Spring REST - Exception Handling",id:"spring-rest---exception-handling",level:2},{value:"@ExceptionHandler",id:"exceptionhandler",level:3},{value:"Spring REST - Global Exception Handling",id:"spring-rest---global-exception-handling",level:2},{value:"@ControllerAdvice",id:"controlleradvice",level:3},{value:"Spring REST API Design",id:"spring-rest-api-design",level:2},{value:"Bad REST API Design | Anti-Patterns",id:"bad-rest-api-design--anti-patterns",level:3},{value:"Spring Boot REST API - Real Time Project",id:"spring-boot-rest-api---real-time-project",level:2},{value:"Purpose of Service Layer",id:"purpose-of-service-layer",level:3},{value:"@Service",id:"service",level:3},{value:"Service Layer - Best Practice",id:"service-layer---best-practice",level:3},{value:"Sending JSON to Spring REST Controllers",id:"sending-json-to-spring-rest-controllers",level:3},{value:"Development Process",id:"development-process",level:3},{value:"Spring Data JPA",id:"spring-data-jpa",level:2},{value:"JpaRepository",id:"jparepository",level:3},{value:"Spring Data REST",id:"spring-data-rest",level:2},{value:"REST Endpoints",id:"rest-endpoints",level:3},{value:"HATEOAS",id:"hateoas",level:3},{value:"Pagination",id:"pagination",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rest-crud-apis",children:"REST CRUD APIs"})}),"\n",(0,i.jsx)(n.h2,{id:"rest-api",children:"REST API"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"REST"}),": REpresentational State Transfer"]}),"\n",(0,i.jsxs)(n.li,{children:["Lightweight approach for communicating between applications","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"REST API calls over HTTP"}),"\n",(0,i.jsx)(n.li,{children:"Any programming language"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Data format:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"XML"}),"\n",(0,i.jsx)(n.li,{children:"JSON (JavaScript Object Notation)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"json-example",children:"JSON Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n    "id": 14,\n    "firstName": "Mario",\n    "lastName": "Rossi",\n    "active": true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"rest-over-http",children:"REST over HTTP"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use HTTP methods for CRUD operations"}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n\nA[POST] --\x3e B[Create]\nC[GET] --\x3e D[Read]\nE[PUT] --\x3e F[Update]\nG[DELETE] --\x3e H[Delete]"}),"\n",(0,i.jsx)(n.h2,{id:"http-messages",children:"HTTP Messages"}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n\nA[Client Application] == HTTP Request Message ==> B[REST Service]\n\nB == HTTP Response Message ==> A"}),"\n",(0,i.jsx)(n.h3,{id:"http-request-message",children:"HTTP Request Message"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Request line: the HTTP command"}),"\n",(0,i.jsx)(n.li,{children:"Header variables: request metadata"}),"\n",(0,i.jsx)(n.li,{children:"Message body: contents of message"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HTTP Request message"})}),"\n",(0,i.jsx)(n.mermaid,{value:'block-beta\n  block\n    columns 1\n    A["Request line"]\n    B["Header variables"]\n    C["Message Body"]\n  end\n\nstyle A fill:orange,color:white;\nstyle B fill:green,color:white;\nstyle C fill:blue,color:white;'}),"\n",(0,i.jsx)(n.h3,{id:"http-response-message",children:"HTTP Response Message"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Response line: server protocol and status code"}),"\n",(0,i.jsx)(n.li,{children:"Header variables: response metadata"}),"\n",(0,i.jsx)(n.li,{children:"Message body: contents of message"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HTTP Response Message"})}),"\n",(0,i.jsx)(n.mermaid,{value:'block-beta\n  block\n    columns 1\n    A["Response line"]\n    B["Header variables"]\n    C["Message Body"]\n  end\n\nstyle A fill:orange,color:black;\nstyle B fill:green,color:white;\nstyle C fill:blue,color:white;'}),"\n",(0,i.jsx)(n.h3,{id:"http-response---status-codes",children:"HTTP Response - Status Codes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Informational: 100 - 199"}),"\n",(0,i.jsx)(n.li,{children:"Successful: 200 - 299"}),"\n",(0,i.jsx)(n.li,{children:"Redirection: 300 - 399"}),"\n",(0,i.jsx)(n.li,{children:"Client Error: 400 - 499"}),"\n",(0,i.jsx)(n.li,{children:"Server Error: 500 - 599"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mime-content-types",children:"MIME Content Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multipurpose Internet Mail-Extension"}),"\n",(0,i.jsx)(n.li,{children:"Basic Syntax: type/sub-type"}),"\n",(0,i.jsxs)(n.li,{children:["Examples","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"text/html, text/plain"}),"\n",(0,i.jsx)(n.li,{children:"application/json, application/xml,"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"postman",children:"Postman"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Postman is a good client tool to Send HTTP requests to the REST Web Service / API"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest-controller",children:"Spring REST Controller"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// @RestController annotation adds REST Support\n@RestController\n@RequestMapping("/test")\npublic class DemoRestController {\n\n    //Access the REST endpoint at /test/hello\n    @GetMapping("/hello")\n    public String sayHello() {\n        //return this content to the client\n        return "Hello World!";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["When we send a GET request to ",(0,i.jsx)(n.a,{href:"http://localhost:8080/spring-rest-demo/test/hello",children:"http://localhost:8080/spring-rest-demo/test/hello"}),", we will see the response: Hello World!"]})}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest-controller---dev-process",children:"Spring REST Controller - Dev Process"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Add Maven dependency for Spring Boot Starter Web"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.strong,{children:"pom.xml"})," file,"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\x3c!-- Add Spring Boot Starter Web --\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Create Spring REST Service using @RestController"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'@RestController\n@RequestMapping("/test")\npublic class DemoRestController {\n\n    //Recall that this Handles HTTP GET requests\n    @GetMapping("/hello")\n    public String sayHello() {\n        return "Hello World!";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"java-json-data-binding",children:"Java JSON Data Binding"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data binding is the process of converting JSON data to a Java POJO"}),"\n",(0,i.jsxs)(n.li,{children:["AKA:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mapping"}),"\n",(0,i.jsx)(n.li,{children:"Serialization / Deserialization"}),"\n",(0,i.jsx)(n.li,{children:"Marshalling / Unmarshalling"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n\nA[JSON] --\x3e B[Java POJO]\n\nB == Data Binding ==> A\n"}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest-service---students-example",children:"Spring REST Service - Students example"}),"\n",(0,i.jsx)(n.p,{children:"What does creating a new service mean?"}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Objective: Return a list of students"}),"\n",(0,i.jsxs)(n.li,{children:["Use a ",(0,i.jsx)(n.strong,{children:"GET"})," Request at this endpoint: ",(0,i.jsx)(n.code,{children:"/api/students"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"JSON converted to Java POJO and vice versa is automatically handled by Spring Boot."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create Java POJO class for Student"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"public class Student {\n  private String firstName;\n  private String lastName;\n\n  public Student() {\n\n  }\n\n  public Student(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n\n  public void setLastName(String lastName) {\n    this.lastName = lastName;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Create Spring REST Service using @RestController"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'@RestController\n@RequestMapping("/api")\npublic class StudentRestController {\n  // define endpoint for "/students" - return list of students\n  @GetMapping("/students")\n  public List<Student> getStudents() {\n    List<Student> theStudents = new ArrayList<>();\n\n    theStudents.add(new Student("Poornima", "Patel"));\n    theStudents.add(new Student("Mario", "Rossi"));\n    theStudents.add(new Student("Mary", "Smith"));\n\n    return theStudents;\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"path-variables--pathvariable",children:"Path Variables & @PathVariable"}),"\n",(0,i.jsx)(n.p,{children:"Retrieve a single student by id"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"GET"})," ",(0,i.jsx)(n.code,{children:"/api/students/{studentId} "})]}),"\n",(0,i.jsx)(n.p,{children:"studentId is a path variable."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add request mapping to Spring REST Service","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bind path variable to method parameter using @PathVariable"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'@RestController\n@RequestMapping("/api")\npublic class StudentRestController {\n  // define endpoint for "/students/{studentId}" - return student at index\n  // Require the @PathVariable annotation\n  @GetMapping("/students/{studentId}")\n  public Student getStudent(@PathVariable int studentId) {\n    List<Student> theStudents = new ArrayList<>();\n    // populate theStudents\n    \u2026\n    return theStudents.get(studentId);\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest---exception-handling",children:"Spring REST - Exception Handling"}),"\n",(0,i.jsx)(n.p,{children:"If there is bad data, throw an exceptions."}),"\n",(0,i.jsx)(n.p,{children:"e.g. 9999 is a bad path variable"}),"\n",(0,i.jsxs)(n.p,{children:["We receive ",(0,i.jsx)(n.code,{children:"/api/students/9999"})]}),"\n",(0,i.jsx)(n.p,{children:"We throw back:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n  "status": 404,\n  "message": "Student Id not found - 9999",\n  "timeStamp": 433254242\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exception handler code is only for the specific REST controller"}),"\n",(0,i.jsx)(n.li,{children:"Can't be reused by other controllers"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"exceptionhandler",children:"@ExceptionHandler"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exception handler will return a ResponseEntity"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ResponseEntity"})," is a wrapper for the HTTP response object"]}),"\n",(0,i.jsxs)(n.li,{children:["ResponseEntity provides fine-grained control to specify:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"HTTP status code"}),"\n",(0,i.jsx)(n.li,{children:"HTTP headers"}),"\n",(0,i.jsx)(n.li,{children:"Response body"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a custom error response class"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Developer defines the error response as a POJO"}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram\n\nclass StudentErrorResponse{\n  int: status\n  String: message\n  long: timeStamp\n  int: getStatus()\n  setStatus()\n}\n"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"public class StudentErrorResponse {\n  private int status;\n  private String message;\n  private long timeStamp;\n  // constructors\n  // getters / setters\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The custom error response class will be sent back to client as JSON"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n  "status": 404,\n  "message": "Student Id not found - 9999",\n  "timeStamp": 433254242\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Create a custom exception class"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"public class StudentNotFoundException extends RuntimeException {\n  public StudentNotFoundException(String message) {\n    super(message);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Update REST service to throw exception if student not found"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'@RestController\n@RequestMapping("/api")\npublic class StudentRestController {\n  @GetMapping("/students/{studentId}")\n  public Student getStudent(@PathVariable int studentId) {\n    // check the studentId against list size\n    if ( (studentId >= theStudents.size()) || (studentId < 0) ) {\n      throw new StudentNotFoundException("Student id not found - " + studentId);\n    }\n\n    return theStudents.get(studentId);\n  }\n  ...\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Add an exception handler method using @ExceptionHandler"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'@RestController\n@RequestMapping("/api")\npublic class StudentRestController {\n  ...\n  /*\n   * Params: StudentNotFoundException is an Exception type to handle / catch\n   * Returns: ResponseEntity<StudentErrorResponse> where StudentErrorResponse is the type of the response body\n   *\n  */\n  @ExceptionHandler\n  public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc) {\n    StudentErrorResponse error = new StudentErrorResponse();\n    error.setStatus(HttpStatus.NOT_FOUND.value());\n    error.setMessage(exc.getMessage());\n    error.setTimeStamp(System.currentTimeMillis());\n\n    // error is Body\n    // HttpStatus.NOT_FOUND is a Status code\n    return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest---global-exception-handling",children:"Spring REST - Global Exception Handling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Global exception handlers","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"promotes reuse of exception handlers"}),"\n",(0,i.jsx)(n.li,{children:"centralizes exception handling"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"controlleradvice",children:"@ControllerAdvice"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"@ControllerAdvice is similar to an interceptor / filter"}),"\n",(0,i.jsx)(n.li,{children:"Pre-process requests to controllers"}),"\n",(0,i.jsx)(n.li,{children:"Post-process responses to handle exceptions"}),"\n",(0,i.jsx)(n.li,{children:"Perfect for global exception handling"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create new @ControllerAdvice"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"@ControllerAdvice\npublic class StudentRestExceptionHandler {\n  ...\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Refactor REST service ... remove exception handling code"}),"\n",(0,i.jsx)(n.li,{children:"Add exception handling code to @ControllerAdvice"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"StudentRestExceptionHandler.java"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"@ControllerAdvice\npublic class StudentRestExceptionHandler {\n  @ExceptionHandler\n  public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundException exc) {\n    StudentErrorResponse error = new StudentErrorResponse();\n    error.setStatus(HttpStatus.NOT_FOUND.value());\n    error.setMessage(exc.getMessage());\n    error.setTimeStamp(System.currentTimeMillis());\n    return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"spring-rest-api-design",children:"Spring REST API Design"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"API Design Process"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Review API requirements"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": Create a REST API for the Employee Directory"]}),"\n",(0,i.jsx)(n.p,{children:"REST clients should be able to"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Get a list of employees"}),"\n",(0,i.jsx)(n.li,{children:"Get a single employee by id"}),"\n",(0,i.jsx)(n.li,{children:"Add a new employee"}),"\n",(0,i.jsx)(n.li,{children:"Update an employee"}),"\n",(0,i.jsx)(n.li,{children:"Delete an employee"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Identify main resource / entity"}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'To identify main resource / entity, look for the most prominent "noun"'}),"\n",(0,i.jsx)(n.li,{children:'For our project, it is "employee"'}),"\n",(0,i.jsxs)(n.li,{children:["Convention is to use plural form of resource / entity: employees","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/api/employees\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Use HTTP methods to assign action on resource"}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart LR\n\nA[POST] --\x3e B["/api/employees"] --\x3e C[Create a new employee]\nD[GET] --\x3e E["/api/employees"] --\x3e F[Read a list of employees]\nG[GET] --\x3e H["/api/employees/{employeeId}"] --\x3e I[Read a single employee]\nJ[PUT] --\x3e K["/api/employees"] --\x3e L[Update an existing employee]\nM[DELETE] --\x3e N["/api/employees/{employeeId}"] --\x3e O[Delete an existing employee]'}),"\n",(0,i.jsx)(n.h3,{id:"bad-rest-api-design--anti-patterns",children:"Bad REST API Design | Anti-Patterns"}),"\n",(0,i.jsx)(n.p,{children:"Don't include actions in the endpoint:"}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsx)(n.p,{children:"These are REST anti-patterns, bad practice"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/api/employeesList\n/api/deleteEmployee\n/api/addEmployee\n/api/updateEmployee\n"})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Instead, use HTTP methods to assign actions"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-rest-api---real-time-project",children:"Spring Boot REST API - Real Time Project"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["REST API with Spring Boot that connects to a database\n",(0,i.jsx)(n.strong,{children:"Application Architecture"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n\nA[Employee REST Controller] --\x3e B[Employee Service]\nB --\x3e A\n\nB --\x3e C[Employee DAO]\nC --\x3e B\n\nC --\x3e D[(Database)]\nD --\x3e C\n\nstyle A fill:green,color:white;\nstyle B fill:red,color:white;\nstyle C fill:purple,color:white;\nstyle D fill:grey,stroke:black,color:white;"}),"\n",(0,i.jsx)(n.h3,{id:"purpose-of-service-layer",children:"Purpose of Service Layer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Service Facade design pattern"}),"\n",(0,i.jsx)(n.li,{children:"Intermediate layer for custom business logic"}),"\n",(0,i.jsx)(n.li,{children:"Integrate data from multiple sources (DAO/repositories)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"service",children:"@Service"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"@Service"})," applied to Service implementations"]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart TD\n\nA[@RestController] --\x3e D[@Component]\nB[@Respository] --\x3e D\nC[@Service] --\x3e D\n\nstyle A fill:blue,color:white;\nstyle B fill:orange,color:white;\nstyle C fill:red,color:white;\nstyle D fill:green,color:white;"}),"\n",(0,i.jsx)(n.h3,{id:"service-layer---best-practice",children:"Service Layer - Best Practice"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Best practice is to apply transactional boundaries at the service layer"}),"\n",(0,i.jsx)(n.li,{children:"It is the service layer\u2019s responsibility to manage transaction boundaries"}),"\n",(0,i.jsxs)(n.li,{children:["For implementation code","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Apply @Transactional on service methods"}),"\n",(0,i.jsx)(n.li,{children:"Remove @Transactional on DAO methods if they already exist"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sending-json-to-spring-rest-controllers",children:"Sending JSON to Spring REST Controllers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For controller to process JSON data, need to set a HTTP request header","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Content-type: application/json"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Need to configure REST client to send the correct HTTP request header"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"development-process",children:"Development Process"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Set up Database Dev Environment\nExample: ",(0,i.jsx)(n.strong,{children:"File: employee.sql"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a new database table: employee"}),"\n",(0,i.jsx)(n.li,{children:"Load table with sample data"}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Create Spring Boot project using Spring Initializr"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Get list of employees"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1: DAO Interface"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"public interface EmployeeDAO {\n  List<Employee> findAll();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 2: DAO Impl"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"@Service\npublic class EmployeeServiceImpl implements EmployeeService {\n  // inject EmployeeDAO \u2026\n  @Override\n  public List<Employee> findAll() {\n    return employeeDAO.findAll();\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DAO: Get a list of employees"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'@Override\npublic List<Employee> findAll() {\n  // create a query\n  TypedQuery<Employee> theQuery = entityManager.createQuery("from Employee", Employee.class);\n  // execute query and get result list\n  List<Employee> employees = theQuery.getResultList();\n  // return the results\n  return employees;\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Get single employee by ID"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DAO: Get a single employee"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"@Override\npublic Employee findById(int theId) {\n  // get employee\n  Employee theEmployee = entityManager.find(Employee.class, theId);\n  // return employee\n  return theEmployee;\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Add a new employee"}),"\n",(0,i.jsx)(n.li,{children:"Update an existing employee"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DAO: Add or Update employee"}),":"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"We don\u2019t use @Transactional at DAO layer.\nIt will be handled at Service layer."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"\n@Override\npublic Employee save(Employee theEmployee) {\n  // if id == 0 then save/insert\n  // else update\n  Employee dbEmployee = entityManager.merge(theEmployee);\n  // return dbEmployee\n  // It has updated id from the database (in the case of insert)\n  return dbEmployee;\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:"Delete an existing employee"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DAO: Delete an existing employee"}),":"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"We don\u2019t use @Transactional at DAO layer.\nIt will be handled at Service layer."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"@Override\npublic void deleteById(int theId) {\n  // find the employee by id\n  Employee theEmployee = entityManager.find(Employee.class, theId);\n  // delete the employee\n  entityManager.remove(theEmployee);\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Refer to code in VS code for examples."})}),"\n",(0,i.jsx)(n.h2,{id:"spring-data-jpa",children:"Spring Data JPA"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://spring.io/projects/spring-data-jpa",children:"https://spring.io/projects/spring-data-jpa"})}),"\n",(0,i.jsxs)(n.li,{children:["Create a DAO and just plug in your ",(0,i.jsx)(n.strong,{children:"entity type"})," and ",(0,i.jsx)(n.strong,{children:"primary key"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Spring will give you a CRUD implementation for FREEs"}),"\n",(0,i.jsx)(n.li,{children:"More than 70% reduction in code ... depending on use case"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"jparepository",children:"JpaRepository"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html",children:"https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"})}),"\n",(0,i.jsxs)(n.li,{children:["Spring Data JPA provides the interface: ",(0,i.jsx)(n.code,{children:"JpaRepository"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exposes methods (some by inheritance from parents)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Development Process"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Extend JpaRepository interface"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Employee is the Entity type\n// Integer is the Primary Key\npublic interface EmployeeRepository extends JpaRepository<Employee, Integer> {\n  // that's it ... no need to write any code LOL!\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Use your Repository in your app"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"@Service\npublic class EmployeeServiceImpl implements EmployeeService {\n  private EmployeeRepository employeeRepository;\n\n  @Autowired\n  public EmployeeServiceImpl(EmployeeRepository theEmployeeRepository) {\n    employeeRepository = theEmployeeRepository;\n  }\n\n  @Override\n  public List<Employee> findAll() {\n    //findAll() method available from JpaRepository implementation\n    return employeeRepository.findAll();\n  }\n\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"spring-data-rest",children:"Spring Data REST"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://spring.io/projects/spring-data-rest",children:"https://spring.io/projects/spring-data-rest"})}),"\n",(0,i.jsxs)(n.li,{children:["Leverages your existing ",(0,i.jsx)(n.code,{children:"JpaRepository"})]}),"\n",(0,i.jsx)(n.li,{children:"Give you a REST CRUD implementation for FREE"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add Spring Data REST to your Maven POM file"}),"\n",(0,i.jsx)(n.li,{children:"No additional coding required"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-rest</artifactId>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Thus, all you need to do is:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Your entity: ",(0,i.jsx)(n.code,{children:"Employee"})]}),"\n",(0,i.jsxs)(n.li,{children:["JpaRepository: ",(0,i.jsx)(n.code,{children:"EmployeeRepository extends JpaRepository"})]}),"\n",(0,i.jsxs)(n.li,{children:["Maven POM dependency for: ",(0,i.jsx)(n.code,{children:"spring-boot-starter-data-rest"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rest-endpoints",children:"REST Endpoints"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["By default, Spring Data REST will create endpoints based on entity type","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In Simple pluralized form","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First character of Entity type is lowercase"}),"\n",(0,i.jsx)(n.li,{children:'Then just adds an "s" to the entity'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Employee --\x3e "/employees"\npublic interface EmployeeRepository extends JpaRepository<Employee, Integer> {\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:'Sometimes we need to customize the endpoint name or the plural noun is not simply putting an "s" at the end of it i.e. geese is plural for goose'}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Thus, specify plural name / path with an annotation"}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'//endpoints will be http://localhost:8080/members\n@RepositoryRestResource(path="members")\npublic interface EmployeeRepository extends JpaRepository<Employee, Integer> {\n}\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"hateoas",children:"HATEOAS"}),"\n",(0,i.jsx)(n.p,{children:"Hypermedia as the Engine of Application State"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Hypermedia-driven sites provide information to access REST interfaces","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Think of it as meta-data for REST data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["By default, Spring Data REST will return the first 20 elements","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Page size = 20"}),"\n",(0,i.jsx)(n.li,{children:"Pages are zero-based"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://localhost:8080/employees?page=0\nhttp://localhost:8080/employees?page=1\n...\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Configuration in ",(0,i.jsx)(n.strong,{children:"application.properties"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spring.data.rest.base-path"}),": Base path used to expose repository resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spring.data.rest.default-page-size"}),": Default size of pages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"spring.data.rest.max-page-size"}),": Maximum size of pages"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["e.g. ",(0,i.jsx)(n.strong,{children:"application.properties"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"spring.data.rest.base-path=/magic-api\nspring.data.rest.default-page-size=50\n"})}),"\n",(0,i.jsx)(n.p,{children:"Outcome:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"http://localhost:8080/magic-api/employees"})}),"\n",(0,i.jsx)(n.li,{children:"Returns 50 elements per page"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
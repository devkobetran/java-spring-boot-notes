"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[1495],{6762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(4848),i=t(8453);const r={sidebar_position:3},o="Unit Testing with Spring Boot & Mockito",a={id:"unit-testing/unit-testing-spring-boot-mockito",title:"Unit Testing with Spring Boot & Mockito",description:"- Unit testing with Spring Boot and Mockito, focusing on creating and testing RESTful services.",source:"@site/docs/unit-testing/unit-testing-spring-boot-mockito.md",sourceDirName:"unit-testing",slug:"/unit-testing/unit-testing-spring-boot-mockito",permalink:"/java-spring-boot-notes/docs/unit-testing/unit-testing-spring-boot-mockito",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/java-spring-boot-notes/docs/unit-testing/unit-testing-spring-boot-mockito.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Mocking with Mockito",permalink:"/java-spring-boot-notes/docs/unit-testing/mocking-with-mockito"}},c={},l=[{value:"Spring Boot &amp; Mockito",id:"spring-boot--mockito",level:2},{value:"MockMvc Test",id:"mockmvc-test",level:3},{value:"Creating a Basic REST Service in Item Controller",id:"creating-a-basic-rest-service-in-item-controller",level:2},{value:"JSONassert",id:"jsonassert",level:2},{value:"Rest Service &amp; Business Layer",id:"rest-service--business-layer",level:2},{value:"Data Layer with JPA, Hibernate, and H2",id:"data-layer-with-jpa-hibernate-and-h2",level:2},{value:"Writing Unit Test for Business Layer",id:"writing-unit-test-for-business-layer",level:3},{value:"Writing Test for Data Layer",id:"writing-test-for-data-layer",level:3},{value:"Writing an Integration Test",id:"writing-an-integration-test",level:3},{value:"Creating different test configuration",id:"creating-different-test-configuration",level:3},{value:"Functional Programming in BusinessImpl",id:"functional-programming-in-businessimpl",level:2},{value:"Better Assertions with Hamcrest",id:"better-assertions-with-hamcrest",level:2},{value:"AssertJ",id:"assertj",level:2},{value:"JSONPath",id:"jsonpath",level:2},{value:"xunitpatterns",id:"xunitpatterns",level:2},{value:"Measuring Test Coverage",id:"measuring-test-coverage",level:2},{value:"Good Unit Tests",id:"good-unit-tests",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unit-testing-with-spring-boot--mockito",children:"Unit Testing with Spring Boot & Mockito"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unit testing with Spring Boot and Mockito, focusing on creating and testing RESTful services."}),"\n",(0,s.jsx)(n.li,{children:"Write unit tests for various application layers"}),"\n",(0,s.jsx)(n.li,{children:"Explore integration testing"}),"\n",(0,s.jsx)(n.li,{children:"Enhance test assertions using advanced libraries like Hamcrest and AssertJ."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot--mockito",children:"Spring Boot & Mockito"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"HelloWorldController.java"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloWorldController {\n\n    @GetMapping("/hello-world")\n    public String helloWorld() {\n        return "Hello World";\n    }\n}\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mockmvc-test",children:"MockMvc Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\nimport org.springframework.http.MediaType;\n\n@ExtendWith(SpringExtension.class)\n@WebMvcTest(HelloWorldController.class)\npublic class HelloWorldControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void helloWorld_basic() throws Exception {\n        // call GET "/hello-world" application/json\n        MvcResult result = mockMvc.perform(\n            get("/hello-world")\n            .accept(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk())\n            .andExpect(content().string("Hello World"))\n            .andReturn();\n\n        // Verification\n        assertEquals("Hello World", result.getResponse().getContentAsString());\n    }\n}\n\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".andExpect"})," are response matchers to check status and content"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-basic-rest-service-in-item-controller",children:"Creating a Basic REST Service in Item Controller"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"public class Item {\n\n    private int id;\n    private String name;\n    private int price;\n    private int quantity;\n\n    public Item(int id, String name, int price, int quantity){\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    ...\n\n    //getter methods\n\n    //toString method\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemController.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@RestController\npublic class ItemController {\n    @GetMapping("/dummy-item")\n    public Item helloWorld() {\n        return new Item(1, "Ball", 10, 100)\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemControllerTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@ExtendWith(SpringExtension.class)\n@WebMvcTest(ItemController.class)\npublic class ItemControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void dummyItem_basic() throws Exception {\n\n        MvcResult result = mockMvc.perform(\n            get("/dummy-item")\n            .accept(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk())\n            .andExpect(content().json("{\\"id\\": 1,\\"name\\":\\"Ball\\",\\"price\\":10,\\"quantity\\":100}"))\n            .andReturn();\n\n        // Verification\n        assertEquals("Hello World", result.getResponse().getContentAsString());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"jsonassert",children:"JSONassert"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JsonAssertTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.skyscreamer.jsonassert.JSONAssert;\nimport org.skyscreamer.jsonassert.JSONCompareMode;\n\npublic class JsonAssertTest {\n\n    String str = "{\\"id\\": 1,\\"name\\":\\"Ball\\",\\"price\\":10,\\"quantity\\":100}";\n\n    @Test\n    public void jsonAssert_StrictTrue_ExactMatchExceptForSpaces() throws JSONException{\n        String expectedResponse = "\\"id\\": 1,\\"name\\":\\"Ball\\"";\n        JSONAssert.assertEquals(expectedResponse, actualResponse, true); // test failed, need to have price and quantity when strict is true\n    }\n\n    @Test\n    public void jsonAssert_StrictFalse() throws JSONException{\n        String expectedResponse = "\\"id\\": 1,\\"name\\":\\"Ball\\"";\n        JSONAssert.assertEquals(expectedResponse, actualResponse, false); // test passed when strict is false\n    }\n\n    @Test\n    public void jsonAssert_StrictFalse_TestFailed() throws JSONException{\n        String expectedResponse = "\\"id\\": 1,\\"name\\":\\"Ball\\",\\"price\\":11";\n        JSONAssert.assertEquals(expectedResponse, actualResponse, false); // test failed when strict is false and price doesn\'t match\n    }\n\n    @Test\n    public void jsonAssert_WithoutEscapeCharacters() throws JSONException{\n        String expectedResponse = "id: 1, name: Ball, price: 10";\n        JSONAssert.assertEquals(expectedResponse, actualResponse, false); // test passed\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"rest-service--business-layer",children:"Rest Service & Business Layer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemController.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@RestController\npublic class ItemController {\n\n    @Autowired\n    private ItemBusinessService businessService;\n\n    @GetMapping("/dummy-item")\n    public Item dummyItem() {\n        ...\n        // look at previous sections above\n    }\n\n    @GetMapping("/item-from-business-service")\n    public Item itemFromBusinessService() {\n        return businessService.retrieveHardcodedItem();\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemBusinessService.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'public class ItemBusinessService {\n    public Item retrieveHardcodedItem() {\n        return new Item(1, "Ball", 10, 100);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemControllerTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\n\n@ExtendWith(SpringExtension.class)\n@WebMvcTest(ItemController.class)\npublic class ItemControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    // Need to mock business service because the mocked controller does not mock the business service for you\n    @MockBean\n    private ItemBusinessService businessService;\n\n    @Test\n    public void dummyItem_basic() throws Exception {\n        ...\n        // look at previous sections above\n    }\n\n    @Test\n    public void itemFromBusinessService_basic() throws Exception {\n\n        // need to define test value using when for the mock businessService\n        when(businessService.retrieveHardCodedItem()).thenReturn(\n            new Item(2, "Item2", 10, 100)\n        );\n\n        MvcResult result = mockMvc.perform(\n            .get("/item-from-business-service")\n            .accept(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk())\n            .andExpect(content().json("{id:2, name:Item2, price:10, quantity:100}"))\n            .andReturn(); // test success\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"data-layer-with-jpa-hibernate-and-h2",children:"Data Layer with JPA, Hibernate, and H2"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In SQL Database,"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"insert into item(id, name, price, quantity) values(10001, 'Item1', 10, 20)\ninsert into item(id, name, price, quantity) values(10002, 'Item2', 5, 10)\ninsert into item(id, name, price, quantity) values(10003, 'Item3', 15, 2)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"@Entity\npublic class Item {\n\n    @Id\n    private int id;\n    private String name;\n    private int price;\n    private int quantity;\n\n    @Transient\n    private int value;\n\n    protected Item() {\n\n    }\n\n    public Item(int id, String name, int price, int quantity){\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    ...\n\n    //getter methods\n\n    //toString method\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemRepository.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface ItemRepository extends JpaRepository<Item, Integer> {}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemBusinessService.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"@Component\npublic class ItemBusinessService {\n\n    @Autowired\n    private ItemRepository repository;\n\n    public Item retrieveHardcodedItem() {\n        ...\n        // look at previous section above\n    }\n\n    public List<Item> retrieveAllItems() {\n        List<Item> items = repository.findAll();\n        for(Item:items){\n            item.setValue(item.getPrice() * item.getQuantity());\n        }\n        return items;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemController.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@RestController\npublic class ItemController {\n\n    @Autowired\n    private ItemBusinessService businessService;\n\n    @GetMapping("/dummy-item")\n    public Item dummyItem() {\n        ...\n        // look at previous sections above\n    }\n\n    @GetMapping("/item-from-business-service")\n    public Item itemFromBusinessService() {\n        ...\n        // look at previous sections above\n    }\n\n    @GetMapping("/all-items-from-database")\n    public List<Item> retrieveAllItems() {\n        return businessService.retrieveAllItems();\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemControllerTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.MvcResult;\n\n@ExtendWith(SpringExtension.class)\n@WebMvcTest(ItemController.class)\npublic class ItemControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    // Need to mock business service because the mocked controller does not mock the business service for you\n    @MockBean\n    private ItemBusinessService businessService;\n\n    @Test\n    public void dummyItem_basic() throws Exception {\n        ...\n        // look at previous sections above\n    }\n\n    @Test\n    public void itemFromBusinessService_basic() throws Exception {\n        ...\n        // refer to previous section above\n    }\n\n    @Test\n    public void retrieveAllItems_basic() throws Exception {\n        // need to define test value using when for the mock businessService\n        when(businessService.retrieveAllItems()).thenReturn(\n            Arrays.asList(new Item(2, "Item2", 10, 10))\n            Arrays.asList(new Item(3, "Item3", 20, 20))\n        );\n\n        MvcResult result = mockMvc.perform(\n            .get("/all-items-from-database")\n            .accept(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk())\n            .andExpect(content().json("[{id:2, name:Item2, price:10}, {id:3, name:Item3, price:30}]"))\n            .andReturn(); // test success\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"writing-unit-test-for-business-layer",children:"Writing Unit Test for Business Layer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemBusinessServiceTest.kt"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@ExtendWith(SpringExtension.class)\nclass ItemBusinessServiceTest {\n    @InjectMocks\n    private ItemBusinessService business;\n\n    @Mock\n    private ItemRepository repository;\n\n    @Test\n    public void calculateSumUsingDataService_basic() {\n        when(repository.findAll()).thenReturn(Arrays.asList(new Item(2, "Item2", 10, 10), new Item(3, "Item3", 20, 20)));\n        List<Item> items = business.retrieveAllItems();\n        assertEquals(100, items.get(0).getValue());\n        assertEquals(400, items.get(1).getValue());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"writing-test-for-data-layer",children:"Writing Test for Data Layer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ItemRepositoryTest.java"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you have a ",(0,s.jsx)(n.strong,{children:"data.sql"})," file in your resources directory, then ",(0,s.jsx)(n.code,{children:"@DataJpaTest"})," should automatically connect with data from the database."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\n@DataJpaTest\nclass ItemRepositoryTest {\n    @Autowired\n    private ItemRepository repository;\n\n    @Test\n    public void testFindAll() {\n        List<Item> items = repository.findAll();\n        assertEquals(4, items.size());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"writing-an-integration-test",children:"Writing an Integration Test"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An Integration Test will launch up all the components, data layers, etc and tests."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;\nimport static org.skyscreamer.jsonassert.JSONAssert.assertEquals;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest(webEnvironment = RANDOM_PORT)\npublic class ItemControllerIT {\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @MockBean\n    private ItemRepository repository;\n\n    @Test\n    public void contextLoads() {\n        String response = this.restTemplate.getForObject("/all-items-from-database", String.class);\n        JSONAssert.assertEquals([{id:10001},{id:10002},{id:10003}], response, false);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-different-test-configuration",children:"Creating different test configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@TestPropertySource(locations = {"classpath:test-configuration.properties"})\npublic class UnitTestingApplicationTests {\n\n    @Test\n    public void contextLoads() {\n        // Test if the Spring application context loads successfully\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"functional-programming-in-businessimpl",children:"Functional Programming in BusinessImpl"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BusinessImpl.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"public class BusinessImpl {\n    private SomeDataService someDataService;\n\n    // setter function\n\n    public int calculateSum(int[] data){\n        // 1, 2, 3, 4, 5 => 1 + 2 ...\n        return Arrays.stream(data).reduce(Integer::sum).orElse(0);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"better-assertions-with-hamcrest",children:"Better Assertions with Hamcrest"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HamcrestMatchersTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class HamcrestMatchersTest {\n\n    @Test\n    public void learning() {\n        List<Integer> numbers = Arrays.asList(12, 15, 45);\n\n        assertThat(numbers, hasSize(3));\n        assertThat(numbers, hasItems(12, 45));\n        assertThat(numbers, everyItem(greaterThan(10)));\n        assertThat(numbers, everyItem(lessThan(100)));\n\n        assertThat("", is(emptyString()));\n        assertThat("ABCDE", containsString("BCD"));\n        assertThat("ABCDE", startsWith("ABC"));\n        assertThat("ABCDE", endsWith("CDE"));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"assertj",children:"AssertJ"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class AssertJTest {\n\n    @Test\n    public void learning() {\n        List<Integer> numbers = Arrays.asList(12, 15, 45);\n\n        // assertJ allows method call chaining\n        assertThat(numbers)\n            .hasSize(3)\n            .contains(12, 15)\n            .allMatch(x -> x > 10)\n            .allMatch(x -> x < 100)\n            .noneMatch(x -> x < 0);\n\n        assertThat("").isEmpty();\n        assertThat("ABCDE").contains("BCD")\n            .startsWith("ABC")\n            .endsWith("CDE");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"jsonpath",children:"JSONPath"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[\n    {"id":10000, "name":"Pencil", "quantity":5},\n    {"id":10001, "name":"Pen", "quantity":15},\n    {"id":10002, "name":"Eraser", "quantity":10},\n]\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.assertj.core.api.Assertions.assertThat;\nimport com.jayway.jsonpath.DocumentContext;\nimport com.jayway.jsonpath.JsonPath;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\npublic class JsonPathTest {\n\n    @Test\n    public void learning() {\n        String responseFromService = "[" +\n            "{\\"id\\":10000, \\"name\\":\\"Pencil\\", \\"quantity\\":5}," +\n            "{\\"id\\":10001, \\"name\\":\\"Pen\\", \\"quantity\\":15}," +\n            "{\\"id\\":10002, \\"name\\":\\"Eraser\\", \\"quantity\\":10}" +\n        "]";\n\n        DocumentContext context = JsonPath.parse(responseFromService);\n        int length = context.read("$.length()");\n        assertThat(length).isEqualTo(3);\n\n        List<Integer> ids = context.read("$..id");\n        assertThat(ids).containsExactly(10000, 10001, 10002);\n\n        System.out.println(context.read("$.[1]").toString());\n        System.out.println(context.read("$.[0:1]").toString());\n        System.out.println(context.read("$.[?(@.name==\'Eraser\')]").toString());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"xunitpatterns",children:"xunitpatterns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Good Resource"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"http://xunitpatterns.com/",children:"xunitpatterns"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"measuring-test-coverage",children:"Measuring Test Coverage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check which lines of code are executed in your unit tests?"}),"\n",(0,s.jsx)(n.li,{children:"Check if you have good number of assertions that cover much of the functionality of your code."}),"\n",(0,s.jsx)(n.li,{children:"Keep your tests lean to have good performance"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"good-unit-tests",children:"Good Unit Tests"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Readable"}),"\n",(0,s.jsx)(n.li,{children:"Fast"}),"\n",(0,s.jsxs)(n.li,{children:["Isolated","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fails only when there is an issue with code"}),"\n",(0,s.jsx)(n.li,{children:"Not dependent on external systems so use mocks"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Run Often"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
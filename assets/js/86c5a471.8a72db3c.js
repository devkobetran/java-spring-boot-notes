"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[8454],{8346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const i={sidebar_position:6},l="Spring MVC",a={id:"tutorial/spring-mvc",title:"Spring MVC",description:"Thymeleaf",source:"@site/docs/tutorial/spring-mvc.md",sourceDirName:"tutorial",slug:"/tutorial/spring-mvc",permalink:"/java-spring-boot-notes/docs/tutorial/spring-mvc",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/java-spring-boot-notes/docs/tutorial/spring-mvc.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"REST API Security",permalink:"/java-spring-boot-notes/docs/tutorial/rest-api-security"},next:{title:"Spring MVC CRUD",permalink:"/java-spring-boot-notes/docs/tutorial/spring-mvc-crud"}},o={},d=[{value:"Thymeleaf",id:"thymeleaf",level:2},{value:"CSS and Thymeleaf",id:"css-and-thymeleaf",level:2},{value:"Spring Boot and Directories for Static Resources",id:"spring-boot-and-directories-for-static-resources",level:2},{value:"Spring MVC Behind the Scenes",id:"spring-mvc-behind-the-scenes",level:2},{value:"Spring MVC Front Controller",id:"spring-mvc-front-controller",level:3},{value:"Controller",id:"controller",level:3},{value:"Model",id:"model",level:3},{value:"View Template",id:"view-template",level:3},{value:"Reading Form Data with Spring MVC",id:"reading-form-data-with-spring-mvc",level:2},{value:"Adding Data to Spring Model",id:"adding-data-to-spring-model",level:2},{value:"Reading HTML Form Data with @RequestParam Annotation",id:"reading-html-form-data-with-requestparam-annotation",level:2},{value:"@GetMapping and @PostMapping",id:"getmapping-and-postmapping",level:2},{value:"Sending Data with GET method",id:"sending-data-with-get-method",level:3},{value:"Sending Data with POST method",id:"sending-data-with-post-method",level:3},{value:"Spring Boot - Spring MVC Form Data Binding - Text Fields",id:"spring-boot---spring-mvc-form-data-binding---text-fields",level:2},{value:"Show Form - Add Model Attribute",id:"show-form---add-model-attribute",level:3},{value:"Setting up HTML Form - Data Binding",id:"setting-up-html-form---data-binding",level:3},{value:"Handling Form Submission in the Controller",id:"handling-form-submission-in-the-controller",level:3},{value:"Spring Boot - Spring MVC Form - Drop Down List",id:"spring-boot---spring-mvc-form---drop-down-list",level:2},{value:"Spring MVC Form - Radio Buttons",id:"spring-mvc-form---radio-buttons",level:2},{value:"Spring MVC Forms - Check Box",id:"spring-mvc-forms---check-box",level:2},{value:"Spring MVC Form Validation",id:"spring-mvc-form-validation",level:2},{value:"Spring MVC Form Validation Required Fields",id:"spring-mvc-form-validation-required-fields",level:2},{value:"Spring MVC Validation @InitBinder",id:"spring-mvc-validation-initbinder",level:2},{value:"@InitBinder",id:"initbinder",level:3},{value:"Register Custom Editor in Controller",id:"register-custom-editor-in-controller",level:3},{value:"Spring MVC Validation Number Range: @Min and @Max",id:"spring-mvc-validation-number-range-min-and-max",level:2},{value:"Spring MVC Validation Regular Expressions",id:"spring-mvc-validation-regular-expressions",level:2},{value:"Spring MVC Validation Make an Integer Field Required",id:"spring-mvc-validation-make-an-integer-field-required",level:2},{value:"Spring MVC Validaton - Strings for Int Fields and Custom Messages",id:"spring-mvc-validaton---strings-for-int-fields-and-custom-messages",level:2},{value:"Spring MVC Validation - Debugging Tips for Customer Error Names",id:"spring-mvc-validation---debugging-tips-for-customer-error-names",level:2},{value:"Spring MVC Validation Custom Validation",id:"spring-mvc-validation-custom-validation",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spring-mvc",children:"Spring MVC"})}),"\n",(0,s.jsx)(n.h2,{id:"thymeleaf",children:"Thymeleaf"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Java templating engine"}),"\n",(0,s.jsx)(n.li,{children:"processed on the server"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add Thymeleaf to Maven POM file"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Develop Spring MVC Controller"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'@Controller\npublic class DemoController {\n  @GetMapping("/")\n  public String sayHello(Model theModel) {\n    //theDate will match up with thymeleaf\'s theDate as well\n    theModel.addAttribute("theDate", java.time.LocalDateTime.now());\n    return "helloworld";\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Create Thymeleaf template"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["thymeleaf location: ",(0,s.jsx)(n.code,{children:"src/main/resources/templates"})]}),"\n",(0,s.jsx)(n.li,{children:"For web apps, Thymeleaf templates have a .html extension"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html xmlns:th="http://www.thymeleaf.org">\n  <head>\n    ...\n  </head>\n  <body>\n    \x3c!-- theDate matches with the Controller\'s theDate --\x3e\n    <p th:text="\'Time on the server is \' + ${theDate}" />\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"css-and-thymeleaf",children:"CSS and Thymeleaf"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"@ symbol will reference context path of your application (app root)"}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create CSS file"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["File Location: ",(0,s.jsx)(n.code,{children:"src/main/resources/static"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example: ",(0,s.jsx)(n.strong,{children:"demo.css"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".funny {\n  font-style: italic;\n  color: green;\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Reference CSS in Thymeleaf template"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<head>\n  <title>Thymeleaf Demo</title>\n  \x3c!-- reference CSS file --\x3e\n  \x3c!-- @ symbol will reference context path of your application (app root) --\x3e\n  <link rel="stylesheet" th:href="@{/css/demo.css}" />\n</head>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Apply CSS style"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<head>\n  <title>Thymeleaf Demo</title>\n  \x3c!-- reference CSS file --\x3e\n  <link rel="stylesheet" th:href="@{/css/demo.css}" />\n</head>\n\n<body>\n  <p th:text="\'Time on the server is \' + ${theDate}" class="funny" />\n</body>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot-and-directories-for-static-resources",children:"Spring Boot and Directories for Static Resources"}),"\n",(0,s.jsx)(n.p,{children:"Spring Boot will search following directories for static resources:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"/META-INF/resources"}),"\n",(0,s.jsx)(n.li,{children:"/resources"}),"\n",(0,s.jsx)(n.li,{children:"/static"}),"\n",(0,s.jsx)(n.li,{children:"/public"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-behind-the-scenes",children:"Spring MVC Behind the Scenes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A set of web pages to layout UI components"}),"\n",(0,s.jsx)(n.li,{children:"A collection of Spring beans (controllers, services, etc\u2026)"}),"\n",(0,s.jsx)(n.li,{children:"Spring configuration (XML, Annotations or Java)"}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart LR\n\nA[Web Browser] --\x3e B[Front Controller]\nB --\x3e C[Controller]\nC --\x3e D[View Template]\nD --\x3e A\n\nstyle A fill:red,color:white;\nstyle B fill:blue,color:white;\nstyle C fill:yellow;\nstyle D fill:green,color:white;"}),"\n",(0,s.jsx)(n.h3,{id:"spring-mvc-front-controller",children:"Spring MVC Front Controller"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Front controller known as DispatcherServlet","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Part of Spring Framework"}),"\n",(0,s.jsx)(n.li,{children:"Already developed by Spring Dev Team"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"controller",children:"Controller"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Code created by developer"}),"\n",(0,s.jsxs)(n.li,{children:["Contains your business logic","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handle the request"}),"\n",(0,s.jsx)(n.li,{children:"Store/retrieve data (db, web service\u2026)"}),"\n",(0,s.jsx)(n.li,{children:"Place data in model"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Send to appropriate view template"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"model",children:"Model"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Model: contains your data"}),"\n",(0,s.jsxs)(n.li,{children:["Store/retrieve data via backend systems","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"database, web service, etc..."}),"\n",(0,s.jsx)(n.li,{children:"Use a Spring bean if you like"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Place your data in the model","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Data can be any Java object/collection"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"view-template",children:"View Template"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Spring MVC is flexible","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Supports many view templates"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Developer creates a page","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Displays data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"reading-form-data-with-spring-mvc",children:"Reading Form Data with Spring MVC"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Controller\npublic class HelloWorldController {\n  // need a controller method to show the initial HTML form\n  @RequestMapping("/showForm")\n  public String showForm() {\n    return "helloworld-form";\n  }\n\n  // need a controller method to process the HTML form\n  @RequestMapping("/processForm")\n  public String processForm() {\n    return "helloworld";\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create Controller class"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Show HTML form"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create controller method to show HTML Form"}),"\n",(0,s.jsx)(n.li,{children:"Create View Page for HTML form"}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Process HTML Form"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create controller method to process HTML Form"}),"\n",(0,s.jsx)(n.li,{children:"Develop View Page for Confirmation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"adding-data-to-spring-model",children:"Adding Data to Spring Model"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Passing Model to the Controller"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@RequestMapping("/processFormVersionTwo")\npublic String letsShoutDude(HttpServletRequest request, Model model) {\n  // read the request parameter from the HTML form\n  String theName = request.getParameter("studentName");\n  // convert the data to all caps\n  theName = theName.toUpperCase();\n  // create the message\n  String result = "Yo! " + theName;\n  // add message to the model\n  model.addAttribute("message", result);\n\n  ...\n\n  // get the data\n  String result = ...\n  List<Student> theStudentList = ...\n  ShoppingCart theShoppingCart = ...\n\n  // add data to the model\n\n  model.addAttribute("message", result);\n  model.addAttribute("students", theStudentList);\n  model.addAttribute("shoppingCart", theShoppingCart);\n  return "helloworld";\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"View Template"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<html>\n  <body>\n    Hello World of Spring! ... The message: <span th:text="\u201c${message}\u201d" />\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"reading-html-form-data-with-requestparam-annotation",children:"Reading HTML Form Data with @RequestParam Annotation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@RequestMapping("/processFormVersionTwo")\npublic String letsShoutDude(\n  // Spring will read param from request: studentName\n  @RequestParam("studentName") String theName, Model model) {\n  // now we can use the variable: theName\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"getmapping-and-postmapping",children:"@GetMapping and @PostMapping"}),"\n",(0,s.jsx)(n.h3,{id:"sending-data-with-get-method",children:"Sending Data with GET method"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Form data is added to end of URL as name/value pairs","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"theUrl?field1=value1&field2=value2..."})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<form th:action=\u201c@{/processForm}\u201d method="GET" \u2026>\n  ...\n</form>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handling Form Submission"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@RequestMapping("/processForm")\npublic String processForm(...) {\n  ...\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Or Handling Form Submission, constraining only to GET"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@GetMapping("/processForm")\npublic String processForm(...) {\n...\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sending-data-with-post-method",children:"Sending Data with POST method"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Form data is passed in the body of HTTP request message"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<form th:action=\u201c@{/processForm}\u201d method="POST" ...>\n  ...\n</form>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"@PostMapping: This mapping ONLY handles POST method"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@PostMapping("/processForm")\npublic String processForm(...) {\n  ...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot---spring-mvc-form-data-binding---text-fields",children:"Spring Boot - Spring MVC Form Data Binding - Text Fields"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners/tree/main/06-spring-boot-spring-mvc/07-form-data-binding-textfields",children:"https://github.com/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners/tree/main/06-spring-boot-spring-mvc/07-form-data-binding-textfields"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data Binding"}),": automatically setting / retrieving data from a Java object / bean."]}),"\n",(0,s.jsxs)(n.li,{children:["Showing a Form","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Within the Spring Controller,","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["there must be a ",(0,s.jsx)(n.em,{children:"model attribute"})," which is a bean that will hold form data for the data binding."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Development Process Example:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create Student Class"}),"\n",(0,s.jsx)(n.li,{children:"Create Student controller class"}),"\n",(0,s.jsx)(n.li,{children:"Create HTML Form"}),"\n",(0,s.jsx)(n.li,{children:"Create form processing code"}),"\n",(0,s.jsx)(n.li,{children:"Create confirmation page"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"show-form---add-model-attribute",children:"Show Form - Add Model Attribute"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"StudentController.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@GetMapping("/showStudentForm")\npublic String showForm(Model theModel) {\n\n    // create a student object\n    Student theStudent = new Student();\n\n    // add student object to the model\n    // student is the model attribute name\n    theModel.addAttribute("student", theStudent);\n\n    return "student-form";\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-html-form---data-binding",children:"Setting up HTML Form - Data Binding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- student is the name of the model attribute --\x3e\n<form th:action="@{/processStudentForm}" th:object="${student}" method="POST">\n  \x3c!-- When form is loaded, Spring MVC will read student from the model, then call: student.getFirstName() --\x3e\n  \x3c!-- When form is submitted, Spring MVC will create a new Student instance \n      and add to the model, then call: student.setFirstName() --\x3e\n  First name: <input type="text" th:field="*{firstName}" />\n\n  <br /><br />\n\n  \x3c!-- When form is loaded, Spring MVC will read student from the model, then call: student.getLastName() --\x3e\n  \x3c!-- When form is submitted, Spring MVC will create a new Student instance \n      and add to the model, then call: student.setLastName() --\x3e\n  Last name: <input type="text" th:field="*{lastName}" />\n\n  <br /><br />\n\n  <input type="submit" value="Submit" />\n</form>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Refer to ",(0,s.jsx)(n.a,{href:"/docs/tutorial/spring-mvc#show-form---add-model-attribute",children:"Show Form - Add Model Attribute"})," code snippet as well."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'th:object="${student}"'})," is the name of the model attribute.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Recall the name of the model attribute is defined as student: ",(0,s.jsx)(n.code,{children:'theModel.addAttribute("student", new Student());'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*{...}"})," is shortcut syntax in thymeleaf. Examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*{firstName}"})," means ",(0,s.jsx)(n.code,{children:"${student.firstName}"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When the form is loaded, Spring MVC will read from the model: ",(0,s.jsx)(n.code,{children:"student.getFirstName()"})]}),"\n",(0,s.jsxs)(n.li,{children:["When form is submitted, Spring MVC will create a new Student instance and add to the model: ",(0,s.jsx)(n.code,{children:"student.setFirstName(\u2026)"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*{lastName}"})," means ",(0,s.jsx)(n.code,{children:"${student.lastName}"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When the form is loaded, Spring MVC will read from the model: ",(0,s.jsx)(n.code,{children:"student.getLastName()"})]}),"\n",(0,s.jsxs)(n.li,{children:["When form is submitted, Spring MVC will create a new Student instance and add to the model: ",(0,s.jsx)(n.code,{children:"student.setLastName(\u2026)"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"handling-form-submission-in-the-controller",children:"Handling Form Submission in the Controller"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// processStudentForm is used in thymeleaf too\n// student is the model attribute name\n@PostMapping("/processStudentForm")\npublic String processForm(@ModelAttribute("student") Student theStudent) {\n    // log the input data\n    System.out.println("theStudent: " + theStudent.getFirstName()\n        + " " + theStudent.getLastName());\n    return "student-confirmation";\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'<html>\n  <body>\n    The student is confirmed:{" "}\n    <span th:text="${student.firstName} + \' \' + ${student.lastName}" />\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"${student.firstName}"})," calls ",(0,s.jsx)(n.code,{children:"student.getFirstName()"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"${student.lastName}"})," calls ",(0,s.jsx)(n.code,{children:"student.getLastName()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot---spring-mvc-form---drop-down-list",children:"Spring Boot - Spring MVC Form - Drop Down List"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<select th:field="*{country}">\n  <option th:value="Brazil">Brazil</option>\n  <option th:value="France">France</option>\n  <option th:value="Germany">Germany</option>\n  <option th:value="India">India</option>\n</select>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"th:value"})," is sent during form submission"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add list of countries to ",(0,s.jsx)(n.strong,{children:"application.properties"})," file"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"countries=Brazil,France,Germany,India,Mexico,Spain,United States\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Inject the countries in the StudentController using @Value"}),"\n",(0,s.jsx)(n.li,{children:"Add the list of countries to the model"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Controller\npublic class StudentController {\n  // @Value grabs the countries list from the application.properties file\n  @Value("${countries}")\n  private List<String> countries;\n\n  @GetMapping("/showStudentForm")\n  public String showForm(Model theModel) {\n    ...\n\n    // add the list of countries to the model\n    theModel.addAttribute("countries", countries);\n\n    return "student-form";\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["In HTML form, generate list of ",(0,s.jsx)(n.code,{children:"<option>"})," tags for the countries."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- Loop over the list of countries --\x3e\n\x3c!-- tempCountry is sent as the th:value during form submission and is also displayed in the UI as th:text--\x3e\n<select th:field="*{country}">\n  <option\n    th:each="tempCountry : ${countries}"\n    th:value="${tempCountry}"\n    th:text="${tempCountry}"\n  ></option>\n</select>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-form---radio-buttons",children:"Spring MVC Form - Radio Buttons"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<input type="radio" th:field="*{favoriteLanguage}" th:value="Go">Go</input>\n<input type="radio" th:field="*{favoriteLanguage}" th:value="Java">Java</input>\n<input type="radio" th:field="*{favoriteLanguage}" th:value="Python">Python</input>\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"th:field"})," binds to property on Student object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"th:value"})," is sent during form submission"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add list of languages to ",(0,s.jsx)(n.strong,{children:"application.properties"})," file"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"languages=Go,Java,Python,Rust,TypeScript\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, update ",(0,s.jsx)(n.strong,{children:"StudentController.java"}),","]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Value("${languages}")\nprivate List<String> languages;\n\n...\n@GetMapping("/showStudentForm")\npublic String showForm(Model theModel){\n  // create a student object\n  Student theStudent = new Student();\n\n  // add the list of languages to the model\n  theModel.addAttribute("languages", languages);\n\n  return "student-form";\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Update HTML form"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"student-form.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Favorite Programming Language:\n\n<input\n  type="radio"\n  th:field="*{favoriteLanguage}"\n  th:each="tempLang : ${languages}"\n  th:value="${tempLang}"\n  th:text="${tempLang}"\n/>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Update Student class - add getter/setter for new property"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Student.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"public class Student {\n  private string favoriteLanguage;\n\n  ...\n\n  //generate getters and setters\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Update confirmation page"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Student-confirmation.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Favorite Programming Language: <span th:text="${student.favoriteLanguage}" />\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-forms---check-box",children:"Spring MVC Forms - Check Box"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<input type="checkbox" th:field="*{favoriteSystems}" th:value="Linux">Linux</input>\n<input type="checkbox" th:field="*{favoriteSystems}" th:value="macOS">macOS</input>\n<input type="checkbox" th:field="*{favoriteSystems}" th:value="\'Microsoft Windows\'">Microsoft Windows</input>\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add list of systems to ",(0,s.jsx)(n.strong,{children:"application.properties"})," file"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"systems=Linux,macOS,Microsoft Windows,Android OS, iOS\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Inject the systems in the StudentController using @Value"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@Value("${systems}")\nprivate List<String> systems;\n\n...\n\n@GetMapping("/showStudentForm")\npublic String showForm(Model theModel){\n  ...\n\n  // add the list of languages to the model\n  theModel.addAttribute("systems", systems);\n\n  return "student-form";\n}\n\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"StudentController.java"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Update HTML form"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"student-form.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Favorite Operating Systems:\n\n<input\n  type="checkbox"\n  th:field="*{favoriteSystems}"\n  th:each="tempSystem : ${systems}"\n  th:value="${tempSystem}"\n  th:text="${tempSystem}"\n/>\n/>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Update Student class - add getter/setter for new property"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Student.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"public class Student {\n  private List<String> favoriteSystems;\n\n  ...\n\n  //generate getters and setters\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"Update confirmation page"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"student-confirmation.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Favorite Operating Systems:\n\n<ul>\n  <li\n    th:each="tempSystem : ${student.favoriteSystems}"\n    th:text="${tempSystem}"\n  />\n</ul>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-form-validation",children:"Spring MVC Form Validation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Java has a standard Bean Validation API"}),"\n",(0,s.jsx)(n.li,{children:"Defines a metadata model and API for entity validation"}),"\n",(0,s.jsx)(n.li,{children:"Spring Boot and Thymeleaf also support the Bean Validation API"}),"\n",(0,s.jsxs)(n.li,{children:["Validation Feature","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"required"}),"\n",(0,s.jsx)(n.li,{children:"validate length"}),"\n",(0,s.jsx)(n.li,{children:"validate numbers"}),"\n",(0,s.jsx)(n.li,{children:"validate with regular expressions"}),"\n",(0,s.jsx)(n.li,{children:"custom validation"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Road map:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"set up our development environment"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Spring Initializer Website"}),"\n",(0,s.jsxs)(n.li,{children:["dependencies:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Spring Web"}),"\n",(0,s.jsx)(n.li,{children:"Thymeleaf"}),"\n",(0,s.jsx)(n.li,{children:"Validation"}),"\n",(0,s.jsx)(n.li,{children:"Spring Boot DevTools"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"required field"}),"\n",(0,s.jsx)(n.li,{children:"validate number range: min, max"}),"\n",(0,s.jsx)(n.li,{children:"validate using regular expression (regexp)"}),"\n",(0,s.jsx)(n.li,{children:"custom validation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-form-validation-required-fields",children:"Spring MVC Form Validation Required Fields"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create Customer class and add validation rules"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import jakarta.validation.constraints.NotNull;\nimport jakarta.validation.constraints.Size;\n\npublic class Customer {\n  private String firstName;\n\n  // use jakarta, not org.jetbrains\n  // validation rules\n  @NotNull(message = "is required")\n  @Size(min=1, message = "is required")\n  private String lastName = \u201c\u201d;\n\n  // getter/setter methods ...\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CustomerController.java"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Add Controller code to show HTML form"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.ui.Model;\n\n@Controller\npublic class CustomerController {\n  //Model allows us to share information between Controllers and view pages (Thymeleaf)\n  @GetMapping("/")\n  public String showForm(Model theModel) {\n    theModel.addAttribute("customer", new Customer());\n    return "customer-form"; //maps to customer-form.html\n  }\n  ...\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Develop HTML form and add validation support"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-form.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- processForm is where to submit form data --\x3e\n\x3c!-- customer is model attribute name --\x3e\n<form th:action="@{/processForm}" th:object="${customer}" method="POST">\n  \x3c!-- Property name from Customer class --\x3e\n  First name: <input type="text" th:field="*{firstName}" /> <br /><br />\n\n  \x3c!-- Property name from Customer class --\x3e\n  Last name (*): <input type="text" th:field="*{lastName}" />\n\n  \x3c!-- Show error message (if present) --\x3e\n  \x3c!-- th:if will check if error message shows up for lastName --\x3e\n  \x3c!-- th:errors will display error message for lastName --\x3e\n  <span\n    th:if="${#fields.hasErrors(\'lastName\')}"\n    th:errors="*{lastName}"\n    class="error"\n  ></span>\n\n  <br /><br />\n\n  <input type="submit" value="Submit" />\n</form>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Perform validation in the Controller class"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CustomerController.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'@PostMapping("/processForm")\npublic String processForm(\n  // @Valid will tell Spring MVC to perform validation\n    //these validation rules are defined in step 1 within the Customer class\n  // customer is the Model attribute name\n  // theBindingResult is the results of validation\n  @Valid @ModelAttribute("customer") Customer theCustomer, BindingResult theBindingResult) {\n  if (theBindingResult.hasErrors()) {\n    //if there is an error in validating the required validation of last name, then return to customer form\n    return "customer-form";\n  }\n  else {\n    //successfully validated the last name, show confirmation page\n    return "customer-confirmation";\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"Create confirmation page"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-confirmation.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html xmlns:th="http://www.thymeleaf.org">\n  <body>\n    The customer is confirmed:\n    <span th:text="${customer.firstName + \' \' + customer.lastName}" />\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validation-initbinder",children:"Spring MVC Validation @InitBinder"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Need to trim whitespace from input fields"}),"\n",(0,s.jsx)(n.li,{children:"whitespace should results in fail and not passes."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"initbinder",children:"@InitBinder"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@InitBinder"})," is a pre-processor"]}),"\n",(0,s.jsx)(n.li,{children:"It will pre-process each web request to our controller"}),"\n",(0,s.jsxs)(n.li,{children:["Method annotated with ",(0,s.jsx)(n.strong,{children:"@InitBinder"})," is executed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@InitBinder"})," will trim Strings.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If String has white spaces (leading or trailing white space), trim it to ",(0,s.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"register-custom-editor-in-controller",children:"Register Custom Editor in Controller"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CustomerController.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// @InitBinder will pre-process all web requests coming into the Controller\n@InitBinder\npublic void initBinder(WebDataBinder dataBinder) {\n  // StringTrimmerEditor is defined in Spring API\n  // StringTrimmerEditor removes whitespace, both leading and trailing\n  // set to value true to trim until it's a null object\n  StringTrimmerEditor stringTrimmerEditor = new StringTrimmerEditor(true);\n  dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validation-number-range-min-and-max",children:"Spring MVC Validation Number Range: @Min and @Max"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add validation rule to Customer class"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import jakarta.validation.constraints.Min;\nimport jakarta.validation.constraints.Max;\n\npublic class Customer {\n  ...\n\n  @Min(value=0, message="must be greater than or equal to zero")\n  @Max(value=10, message="must be less than or equal to 10")\n  private int freePasses;\n  // getter/setter methods\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Display error messages on HTML form"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-form.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Free passes: <input type="text" th:field="*{freePasses}" />\n\n<span\n  th:if="${#fields.hasErrors(\'freePasses\')}"\n  th:errors="*{freePasses}"\n  class="error"\n></span>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Perform validation in the Controller class"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Continuing from earlier examples, keep the ",(0,s.jsx)(n.code,{children:"processForm"})," step alone (keep it the same)"]}),"\n",(0,s.jsxs)(n.li,{children:["The previous code for ",(0,s.jsx)(n.code,{children:"processForm"})," already covers this step."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Update confirmation page"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-confirmation.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Free passes: <span th:text="${customer.freePasses}" />\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validation-regular-expressions",children:"Spring MVC Validation Regular Expressions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.oracle.com/javase/tutorial/essential/regex/",children:"https://docs.oracle.com/javase/tutorial/essential/regex/"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A sequence of characters that define a search pattern","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This pattern is used to find or match strings"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add validation rule to Customer class"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import jakarta.validation.constraints.Pattern;\npublic class Customer {\n  ...\n\n  @Pattern(regexp="^[a-zA-Z0-9]{5}", message="only 5 chars/digits")\n  private String postalCode;\n\n  // getter/setter methods\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Display error messages on HTML form"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-form.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Postal Code: <input type="text" th:fields="*{postalCode}" />\n\n<span\n  th:if="${#fields.hasErrors(\'postalCode\')}"\n  th:errors="*{postalCode}"\n  class="error"\n></span>\n>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Update confirmation page"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-confirmation.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Postal Code: <span th:text="${customer.freePasses}" />\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validation-make-an-integer-field-required",children:"Spring MVC Validation Make an Integer Field Required"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add an additional validation rule to freePasses in Customer class"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Customer.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'  ...\n\n  @NotNull(message="is required")\n  @Min(value=0, message="must be greater than or equal to zero")\n  @Max(value=10, message="must be less than or equal to 10")\n  private Integer freePasses;\n\n  // remember to update the getter/setter methods\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validaton---strings-for-int-fields-and-custom-messages",children:"Spring MVC Validaton - Strings for Int Fields and Custom Messages"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create customer error message in the correct resource location"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"src/main/resources/message.properties"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"typeMismatch.customer.freePasses=Invalid number\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"typeMismatch is an Error type"}),"\n",(0,s.jsx)(n.li,{children:"customer is the Spring model attribute name"}),"\n",(0,s.jsx)(n.li,{children:"freePasses is the field name"}),"\n",(0,s.jsx)(n.li,{children:"Invalid number is the custom message, (you could say anything besides Invalid number)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validation---debugging-tips-for-customer-error-names",children:"Spring MVC Validation - Debugging Tips for Customer Error Names"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["In the ",(0,s.jsx)(n.code,{children:"CustomerController"}),", inspect the binding result object by printing it out"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'System.out.println("Binding Results: " + theBindingResult.toString());\n'})}),"\n",(0,s.jsx)(n.h2,{id:"spring-mvc-validation-custom-validation",children:"Spring MVC Validation Custom Validation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Custom validation returns boolean value for pass/fail (true/false)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Development Process"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create custom validation rule"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"@CourseCode"}),"annotation"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["In IntelliJ, when creating a new Java Class file, select ",(0,s.jsx)(n.strong,{children:"Annotation"}),"."]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@interface"})," syntax defines a custom annotation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@Constraint"})," brings in the helper class with the validation logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@Target"})," allows the custom annotation to be applied to a method or field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@Retention"})," retain this annotation in the Java class file and to process it at runtime"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CourseCode.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import jakarta.validation.Constraint;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Constraint(validatedBy = CourseCodeConstraintValidator.class)\n@Target( { ElementType.METHOD, ElementType.FIELD } )\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CourseCode {\n  // developer puts in value, otherwise default value is "LUV"\n  public String value() default "LUV";\n  // developer puts in message, otherwise default message is as defined below\n  public String message() default "must start with LUV";\n\n  // Groups: can group related constraints\n  public Class<?>[] groups() default {};\n\n  // Payloads: provide custom details about validation failure (severity level, error code, etc)\n  public Class<? extends Payload>[] payload() default {};\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"CourseCodeConstraintValidator"}),", which is a helper class to assist in validation"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CourseCodeConstraintValidator.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import jakarta.validation.ConstraintValidator;\nimport jakarta.validation.ConstraintValidatorContext;\n\n//helper class that contains business rules for validation\npublic class CourseCodeConstraintValidator implements ConstraintValidator<CourseCode, String> {\n  private String coursePrefix;\n\n  @Override\n  public void initialize(CourseCode theCourseCode) {\n    coursePrefix = theCourseCode.value();\n  }\n\n  // Spring MVC will call isValid(...) at runtime\n  // theCode is HTML form data entered by the user\n  // theConstraintValidatorContext is the helper class for additional error messages\n  // returns true or false if the given string is validated\n  @Override\n  public boolean isValid(String theCode, ConstraintValidatorContext theConstraintValidatorContext) {\n    boolean result;\n\n    if (theCode != null) {\n      // in this example, does this course prefix start with "LUV"\n      result = theCode.startsWith(coursePrefix);\n    }\n    else {\n      // the course code is not a required field\n      result = true;\n    }\n      return result;\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Add validation rule to Customer class"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Customer.java"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'public class Customer {\n  ...\n  // add in our custom @CourseCode annotation\n  @CourseCode(value="ANYTHING_YOU_WANT", message="must start with ANYTHING_YOU_WANT")\n  private String courseCode;\n\n  //generate getters and setters\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Display error messages on HTML form"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-form.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Course Code: <input type="text" th:fields="*{courseCode}" />\n\n<span\n  th:if="${#fields.hasErrors(\'courseCode\')}"\n  th:errors="*{courseCode}"\n  class="error"\n></span>\n>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Update confirmation page"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"customer-confirmation.html"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'Course Code: <span th:text="$customer.courseCode}"></span>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[3047],{6681:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var r=t(4848),i=t(8453);const s={sidebar_position:9},l="JPA | Hibernate Advanced Mappings",a={id:"tutorial/jpa-hibernate-advanced-mappings",title:"JPA | Hibernate Advanced Mappings",description:"Advanced Mappings",source:"@site/docs/tutorial/jpa-hibernate-advanced-mappings.md",sourceDirName:"tutorial",slug:"/tutorial/jpa-hibernate-advanced-mappings",permalink:"/java-spring-boot-notes/docs/tutorial/jpa-hibernate-advanced-mappings",draft:!1,unlisted:!1,editUrl:"https://github.com/kotran222/java-spring-boot-notes/docs/tutorial/jpa-hibernate-advanced-mappings.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Spring MVC Security",permalink:"/java-spring-boot-notes/docs/tutorial/spring-mvc-security"},next:{title:"AOP: Aspect-Oriented Programming",permalink:"/java-spring-boot-notes/docs/tutorial/aspect-oriented-programming"}},c={},o=[{value:"Advanced Mappings",id:"advanced-mappings",level:2},{value:"Databases Primary Key and Foreign Key",id:"databases-primary-key-and-foreign-key",level:3},{value:"Cascade",id:"cascade",level:3},{value:"Fetch Types: Eager vs Lazy Loading",id:"fetch-types-eager-vs-lazy-loading",level:3},{value:"One-to-One",id:"one-to-one",level:2},{value:"Entity Lifecycle",id:"entity-lifecycle",level:3},{value:"@OneToOne - Cascade Types",id:"onetoone---cascade-types",level:3},{value:"Configure Cascade Type",id:"configure-cascade-type",level:3},{value:"Configure Multiple Cascade Types",id:"configure-multiple-cascade-types",level:3},{value:"One-to-One: Find an entity",id:"one-to-one-find-an-entity",level:2},{value:"One-to-One: Delete an entity",id:"one-to-one-delete-an-entity",level:2},{value:"One-to-One: Bi-Directional",id:"one-to-one-bi-directional",level:2},{value:"Cascade Delete",id:"cascade-delete",level:3},{value:"Only Delete Instructor Details",id:"only-delete-instructor-details",level:3},{value:"One-to-Many",id:"one-to-many",level:2},{value:"Fetch Types: Eager vs Lazy",id:"fetch-types-eager-vs-lazy",level:2},{value:"Default Fetch Types",id:"default-fetch-types",level:3},{value:"Overriding Default Fetch Type",id:"overriding-default-fetch-type",level:3},{value:"Lazy: Find Courses",id:"lazy-find-courses",level:2},{value:"Lazy: Find Instructor with Courses",id:"lazy-find-instructor-with-courses",level:2},{value:"@OneToMany: Update Instructor",id:"onetomany-update-instructor",level:2},{value:"@OneToMany: Update Course",id:"onetomany-update-course",level:2},{value:"@OneToMany: Delete Instructor",id:"onetomany-delete-instructor",level:2},{value:"@OneToMany: Delete Course",id:"onetomany-delete-course",level:2},{value:"@OneToMany: Uni-Directional",id:"onetomany-uni-directional",level:2},{value:"@ManyToMany",id:"manytomany",level:2},{value:"Join Table",id:"join-table",level:3}];function d(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"jpa--hibernate-advanced-mappings",children:"JPA | Hibernate Advanced Mappings"})}),"\n",(0,r.jsx)(e.h2,{id:"advanced-mappings",children:"Advanced Mappings"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Advanced Mappings:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"One-to-One"}),"\n",(0,r.jsx)(e.mermaid,{value:"flowchart LR\n\nA[Instructor] --\x3e B[Instructor Detail]\n\nstyle A fill:green,color:white;\nstyle B fill:orange,color:white;"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"One-to-Many or Many-to-One"}),"\n",(0,r.jsx)(e.mermaid,{value:"flowchart LR\n\nA[Instructor] --\x3e B[Course 1]\nA --\x3e C[Course 2]\nA --\x3e D[Course 3]\nA --\x3e E[Course 4]\n\nstyle A fill:green,color:white;"}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Many-to-Many"}),"\n",(0,r.jsx)(e.mermaid,{value:"flowchart LR\n\nA[Student 1] --\x3e B[Course 1]\nX[Student 2] --\x3e C[Course 2]\nX --\x3e B\nX --\x3e C\nY[Student 3] --\x3e D[Course 3]\nY --\x3e B\nZ[Student 4] --\x3e E[Course 4]\nZ --\x3e D\n\nstyle A fill:green,color:white;\nstyle X fill:green,color:white;\nstyle Y fill:green,color:white;\nstyle Z fill:green,color:white;"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"databases-primary-key-and-foreign-key",children:"Databases Primary Key and Foreign Key"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Primary key"}),": identify a unique row in a table"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Foreign key"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Link tables together"}),"\n",(0,r.jsx)(e.li,{children:"a field in one table that refers to primary key in another table"}),"\n",(0,r.jsxs)(e.li,{children:["Main purpose is to preserve relationship between tables","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Referential Integrity"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"Prevents operations that would destroy relationship"}),"\n",(0,r.jsxs)(e.li,{children:["Ensures only valid data is inserted into the foreign key column","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Can only contain valid reference to primary key in other table"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"cascade",children:"Cascade"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"cascade"})," operations","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"apply the same operation to related entities"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["If we delete an instructor, we should also delete their instructor_detail","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"This is known as \u201cCASCADE DELETE\u201d"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"fetch-types-eager-vs-lazy-loading",children:"Fetch Types: Eager vs Lazy Loading"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Eager"})," will retrieve everything"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Lazy"})," will retrieve on request"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"one-to-one",children:"One-to-One"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Development Process"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Prep Work - Define database tables"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"create-db.sql"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"DROP SCHEMA IF EXISTS `hb-01-one-to-one-uni`;\n\nCREATE SCHEMA `hb-01-one-to-one-uni`;\n\nuse `hb-01-one-to-one-uni`;\n\nSET FOREIGN_KEY_CHECKS = 0;\n\nDROP TABLE IF EXISTS `instuctor_detail`;\n\nCREATE TABLE `instructor_detail` (\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `youtube_channel` varchar(128) DEFAULT NULL,\n    `hobby` varchar(45) DEFAULT NULL,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\n\nDROP TABLE IF EXISTS `instuctor`;\n\nCREATE TABLE `instructor` (\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `first_name` varchar(45) DEFAULT NULL,\n    `last_name` varchar(45) DEFAULT NULL,\n    `email` varchar(45) DEFAULT NULL,\n    `instructor_detail_id` int(11) DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    KEY `FK_DETAIL_idx` (`instructor_detail_id`),\n    CONSTRAINT `FK_DETAIL` FOREIGN KEY (`instructor_detail_id`)\n    REFERENCES `instructor_detail` (`id`)\n    ON DELETE NO ACTION ON UPDATE NO ACTION\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1;\n...\n"})}),"\n",(0,r.jsxs)(e.admonition,{type:"note",children:[(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"KEY `FK_DETAIL_idx` (`instructor_detail_id`),\nCONSTRAINT `FK_DETAIL` FOREIGN KEY (`instructor_detail_id`)\nREFERENCES `instructor_detail` (`id`)\nON DELETE NO ACTION ON UPDATE NO ACTION\n"})}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"This part is the setup of the foreign key"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CONSTRAINT `FK_DETAIL` FOREIGN KEY (`instructor_detail_id`)\nREFERENCES `instructor_detail` (`id`)\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"will reference the instructor_detail table in the id column."}),"\n",(0,r.jsx)(e.li,{children:"the instructor_detail_id column in the instructor table will be the foreign key that maps to the id column in instructor_detail table"}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Create InstructorDetail class"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"InstructorDetail.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'import jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\n\n// annotate the class as an entity and map to db table\n@Entity\n@Table(name="instructor_detail")\npublic class InstructorDetail {\n\n    //annotate the fields with db column names\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    @Column(name="id")\n    private int id;\n\n    @Column(name="youtube_channel")\n    private String youtubeChannel;\n\n    @Column(name="hobby")\n    private String hobby;\n\n    // constructors\n    public InstructorDetail(String youtubeChannel, String hobby){\n        this.youtubeChannel = youtubeChannel;\n        this.hobby = hobby;\n    }\n\n    ...\n\n    // getters / setters\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Create Instructor class"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Instructor.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor")\npublic class Instructor {\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    @Column(name="id")\n    private int id;\n\n    @Column(name="first_name")\n    private String firstName;\n\n    @Column(name="last_name")\n    private String lastName;\n\n    @Column(name="email")\n    private String email;\n\n    // instructor_detail_id is defined in instructor table\n    // In database, foreign key is configured to reference id field in instructor_detail table\n    @OneToOne\n    @JoinColumn(name="instructor_detail_id")\n    private InstructorDetail instructorDetail;\n\n    // constructors\n    public Instructor(String firstName, String lastName, String email){\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.email = email;\n    }\n\n    ...\n    // getters / setters\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"4",children:["\n",(0,r.jsx)(e.li,{children:"Create DAO interface"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"AppDAO.java"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"public interface AppDAO {\n    void save(Instructor theInstructor);\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"5",children:["\n",(0,r.jsx)(e.li,{children:"Create DAO impl"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Repository\npublic class AppDAOImpl implements AppDAO {\n    //define field for entity manager\n    private EntityManager entityManager;\n\n    //inject entity manager using constructor injection\n    @Autowired\n    public AppDAOImpl(EntityManager entityManager){\n        this.entityManager = entityManager;\n    }\n\n    //@Transactional is needed since we are persisting the entity (saving an object to the database)\n    @Override\n    @Transactional\n    public void save(Instructor theInstructor){\n        //This will also save the details object due to CascadeType.ALL\n        entityManager.persist(theInstructor);\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"6",children:["\n",(0,r.jsx)(e.li,{children:"Create Main App"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@SpringBootApplication\npublic class CruddemoApplication{\n    public static void main(String[] args){\n        StringApplication\n    }\n\n    @Bean\n    public CommandLineRunner commandLineRunner(AppDAO appDAO){\n        return runner -> {\n            createInstructor(appDAO);\n        }\n    }\n\n    private void createInstructor(AppDAO appDAO){\n        //create the instructor\n        Instructor tempInstructor = new Instructor("Chad", "Darby", "darby@luv2code.com");\n\n        //create the instructor detail\n        InstructorDetail tempInstructorDetail = new InstructorDetail("http://www.luv2code.com/youtube", "Luv 2 code");\n\n        //associate the objects\n        tempInstructor.setInstructorDetail(tempInstructorDetail);\n\n        //save the instructor\n        // Note: this will also save the details object\n        // due to CascadeType.ALL\n        appDAO.save(tempInstructor);\n    }\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"7",children:["\n",(0,r.jsxs)(e.li,{children:["enable logging in ",(0,r.jsx)(e.strong,{children:"application.properties"}),":"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"# Show JPA/Hibernate logging messages\nlogging.level.org.hibernate.SQL=trace\nlogging.level.org.hibernate.orm.jdbc.bind=trace\n"})}),"\n",(0,r.jsx)(e.h3,{id:"entity-lifecycle",children:"Entity Lifecycle"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Detach"}),": If entity is detached, it is not associated with a Hibernate session"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Merge"}),": If instance is detached from session, then merge will reattach to session"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Persist"}),": Transitions new instances to managed state. Next flush / commit will save in db."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Remove"}),": Transitions managed entity to be removed. Next flush / commit will delete from db."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Refresh"}),": Reload / synch object with data from db. Prevents stale data"]}),"\n"]}),"\n",(0,r.jsx)(e.mermaid,{value:"flowchart TD;\n\nA[New / Transient] --\x3e|save/persist| B[Persistent / Managed]\nB --\x3e|rollback/new| A\nB --\x3e|refresh| B\nB --\x3e|delete / remove| C[Removed]\nB --\x3e|commit/rollback/close| D[Detached]\nC --\x3e|persist / rollback| B\nC --\x3e|commit| A\nC --\x3e|rollback| D\nD --\x3e|merge| B"}),"\n",(0,r.jsx)(e.h3,{id:"onetoone---cascade-types",children:"@OneToOne - Cascade Types"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"PERSIST"}),": If entity is persisted / saved, related entity will also be persisted"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"REMOVE"}),": If entity is removed / deleted, related entity will also be deleted"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"REFRESH"}),": If entity is refreshed, related entity will also be refreshed"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"DETACH"}),": If entity is detached (not associated w/ session), then related entity will also be detached"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"MERGE"}),": If entity is merged, then related entity will also be merged"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ALL"}),": All of above cascade types"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"configure-cascade-type",children:"Configure Cascade Type"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor")\npublic class Instructor {\n    ...\n\n    // By default, no operations are cascaded\n    @OneToOne(cascade=CascadeType.ALL)\n    @JoinColumn(name="instructor_detail_id")\n    private InstructorDetail instructorDetail;\n    ...\n    // constructors, getters / setters\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"configure-multiple-cascade-types",children:"Configure Multiple Cascade Types"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@OneToOne(cascade={CascadeType.DETACH,\n    CascadeType.MERGE,\n    CascadeType.PERSIST,\n    CascadeType.REFRESH,\n    CascadeType.REMOVE\n})\n"})}),"\n",(0,r.jsx)(e.h2,{id:"one-to-one-find-an-entity",children:"One-to-One: Find an entity"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Define DAO implementation"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOimpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Repository\npublic class AppDAOImpl implements AppDAO {\n...\n    @Override\n    public Instructor findInstructorById(int theId) {\n        // This will also retrieve the instructor details object\n        // because of default behavior of @OnetoOne\n        // fetch type is eager\n        return entityManager.find(Instructor.class, theId);\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Create Main App"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@SpringBootApplication\npublic class CruddemoApplication{\n    public static void main(String[] args){\n        StringApplication\n    }\n\n    @Bean\n    public CommandLineRunner commandLineRunner(AppDAO appDAO){\n        return runner -> {\n            ...\n\n            findInstructor(appDAO);\n        }\n    }\n\n    private void findInstructor(AppDAO appDAO){\n        int theId = 1;\n        System.out.println("Finding instructor id: " + theId);\n\n        Instructor tempInstructor = appDAO.findInstructorById(theId);\n    }\n\n    ...\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"one-to-one-delete-an-entity",children:"One-to-One: Delete an entity"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Define DAO implementation"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Repository\npublic class AppDAOImpl implements AppDAO {\n...\n    @Override\n    @Transactional\n    public void deleteInstructorById(int theId) {\n        // retrieve the instructor\n        Instructor tempInstructor = entityManager.find(Instructor.class, theId);\n        // delete the instructor\n        // this will delete the instructor details object, too\n        // due to CascadeType.ALL\n        entityManager.remove(tempInstructor);\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Create Main App"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@SpringBootApplication\npublic class CruddemoApplication{\n    public static void main(String[] args){\n        StringApplication\n    }\n\n    @Bean\n    public CommandLineRunner commandLineRunner(AppDAO appDAO){\n        return runner -> {\n            ...\n\n            deleteInstructor(appDAO);\n        }\n    }\n\n    private void deleteInstructor(AppDAO appDAO){\n        int theId = 1;\n        System.out.println("Finding instructor id: " + theId);\n\n        Instructor tempInstructor = appDAO.deleteInstructorById(theId);\n    }\n\n    ...\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"one-to-one-bi-directional",children:"One-to-One: Bi-Directional"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Example: We can start with ",(0,r.jsx)(e.code,{children:"InstructorDetail"})," and make it back to the ",(0,r.jsx)(e.code,{children:"Instructor"})]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Development Process"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Make updates to ",(0,r.jsx)(e.code,{children:"InstructorDetail"})," class:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Add new field to reference ",(0,r.jsx)(e.code,{children:"Instructor"})]}),"\n",(0,r.jsxs)(e.li,{children:["Add getter/setter methods for ",(0,r.jsx)(e.code,{children:"Instructor"})]}),"\n",(0,r.jsxs)(e.li,{children:["Add ",(0,r.jsx)(e.code,{children:"@OneToOne"})," annotation"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor_detail")\npublic class InstructorDetail {\n    ...\n    //refers to "instructorDetail" property in "Instructor" class\n    @OneToOne(mappedBy="instructorDetail", cascade=CascadeType.ALL)\n    private Instructor instructor;\n\n    public Instructor getInstructor() {\n        return instructor;\n    }\n\n    public void setInstructor(Instructor instructor) {\n        this.instructor = instructor;\n    }\n    ...\n}\n'})}),"\n",(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@OneToOne(mappedBy="instructorDetail")\n'})}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"mappedBy"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Look at the instructorDetail property in the Instructor class"}),"\n",(0,r.jsxs)(e.li,{children:["Use information from the Instructor class ",(0,r.jsx)(e.code,{children:"@JoinColumn"})]}),"\n",(0,r.jsx)(e.li,{children:"To help find associated instructor"}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Define DAO Interface"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import com.luv2code.cruddemo.entity.Instructor;\n\npublic interface AppDAO {\n    ...\n\n    InstructorDetail findInstructorDetailById(int theId);\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Define DAO implementation"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import com.luv2code.cruddemo.entity.InstructorDetail;\n...\n@Repository\npublic class AppDAOImpl implements AppDAO {\n    // define field for entity manager\n    private EntityManager entityManager;\n    // inject entity manager using constructor injection\n    ...\n\n    @Override\n    public InstructorDetail findInstructorDetailById(int theId) {\n        // this will also retrieve the instructor object\n        // because of default behavior of @OneToOne\n        // retrieve the InstructorDetail\n        return entityManager.find(InstructorDetail.class, theId);\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"4",children:["\n",(0,r.jsx)(e.li,{children:"Create Main App"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@SpringBootApplication\npublic class MainApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainApplication.class, args);\n    }\n    @Bean\n    public CommandLineRunner commandLineRunner(AppDAO appDAO) {\n        return runner -> {\n            ...\n\n            findInstructorDetail(appDAO);\n        }\n    }\n\n    private void findInstructorDetail(AppDAO appDAO){\n        int theId = 1;\n        System.out.println("Finding instructor id: " + theId);\n\n        InstructorDetail tempInstructorDetail = appDAO.findInstructorDetailById(theId);\n    }\n...\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"cascade-delete",children:"Cascade Delete"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Define DAO Interface"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"public interface AppDAO {\n    ...\n\n    void deleteInstructorDetailById(int theId);\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Define DAO implementation"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import com.luv2code.cruddemo.entity.InstructorDetail;\n...\n@Repository\npublic class AppDAOImpl implements AppDAO {\n    // define field for entity manager\n    private EntityManager entityManager;\n    // inject entity manager using constructor injection\n    ...\n\n    @Override\n    @Transactional\n    public void deleteInstructorDetailById(int theId) {\n        //retrieve instructor detail\n        InstructorDetail tempInstructorDetail = entityManager.find(InstructorDetail.class, theId);\n\n        //delete the instructor detail\n        entityManager.remove(tempInstructorDetail);\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Update Main App"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@SpringBootApplication\npublic class MainApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainApplication.class, args);\n    }\n    @Bean\n    public CommandLineRunner commandLineRunner(AppDAO appDAO) {\n        return runner -> {\n            ...\n\n            deleteInstructorDetail(appDAO);\n        }\n    }\n\n    private void deleteInstructorDetail(AppDAO appDAO){\n        int theId = 1;\n        System.out.println("Deleting instructor detail id: " + theId);\n\n        appDAO.deleteInstructorDetailById(theId);\n    }\n...\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"only-delete-instructor-details",children:"Only Delete Instructor Details"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Make updates to ",(0,r.jsx)(e.code,{children:"InstructorDetail"})," class:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Update the casecade type to everything except for remove"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor_detail")\npublic class InstructorDetail {\n    ...\n    //refers to "instructorDetail" property in "Instructor" class\n    @OneToOne(mappedBy="instructorDetail", cascade={CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})\n    private Instructor instructor;\n\n    public Instructor getInstructor() {\n        return instructor;\n    }\n\n    public void setInstructor(Instructor instructor) {\n        this.instructor = instructor;\n    }\n    ...\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Update DAO implementation"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import com.luv2code.cruddemo.entity.InstructorDetail;\n...\n@Repository\npublic class AppDAOImpl implements AppDAO {\n    // define field for entity manager\n    private EntityManager entityManager;\n    // inject entity manager using constructor injection\n    ...\n\n    @Override\n    @Transactional\n    public void deleteInstructorDetailById(int theId) {\n        //retrieve instructor detail\n        InstructorDetail tempInstructorDetail = entityManager.find(InstructorDetail.class, theId);\n\n        // remove the associated object reference\n        // break bi-directional link\n        tempInstructorDetail.getInstructor().setInstructorDetail(null);\n\n        //delete the instructor detail\n        entityManager.remove(tempInstructorDetail);\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Update Main App"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@SpringBootApplication\npublic class MainApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainApplication.class, args);\n    }\n    @Bean\n    public CommandLineRunner commandLineRunner(AppDAO appDAO) {\n        return runner -> {\n            ...\n\n            deleteInstructorDetail(appDAO);\n        }\n    }\n\n    private void deleteInstructorDetail(AppDAO appDAO){\n        int theId = 1;\n        System.out.println("Deleting instructor detail id: " + theId);\n\n        appDAO.deleteInstructorDetailById(theId);\n    }\n...\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"one-to-many",children:"One-to-Many"}),"\n",(0,r.jsx)(e.admonition,{type:"danger",children:(0,r.jsx)(e.p,{children:"DO NOT apply cascading deletes."})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Development Process"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Prep Work - Define database tables"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"create-db.sql"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CREATE TABLE `course` (\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `title` varchar(128) DEFAULT NULL,\n    `instructor_id` int(11) DEFAULT NULL,\n\n    PRIMARY KEY (`id`),\n\n    \x3c!-- prevent duplicate course titles --\x3e\n    UNIQUE KEY `TITLE_UNIQUE` (`title`),\n    ...\n);\n\nCREATE TABLE `course` (\n...\n    KEY `FK_INSTRUCTOR_idx` (`instructor_id`),\n    CONSTRAINT `FK_INSTRUCTOR`\n    FOREIGN KEY (`instructor_id`)\n    REFERENCES `instructor` (`id`)\n...\n);\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Create Course class"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="course")\npublic class Course {\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    @Column(name="id")\n    private int id;\n\n    @Column(name="title")\n    private String title;\n\n    @ManyToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE CascadeType.DETACH, CascadeType.REFRESH})\n    @JoinColumn(name="instructor_id")\n    private Instructor instructor;\n\n    ...\n    // constructors, getters / setters\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Update Instructor class"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor")\npublic class Instructor {\n    ...\n    @OneToMany(mappedBy="instructor")\n    private List<Course> courses;\n\n    // Do not apply cascading deletes!\n    @OneToMany(mappedBy="instructor", cascade={CascadeType.PERSIST, CascadeType.MERGE CascadeType.DETACH, CascadeType.REFRESH})\n    public List<Course> getCourses() {\n        return courses;\n    }\n\n    public void setCourses(List<Course> courses) {\n        this.courses = courses;\n    }\n\n    // add convenience methods for bi-directional relationship\n    public void add(Course tempCourse) {\n        if (courses == null) {\n            courses = new ArrayList<>();\n        }\n        courses.add(tempCourse);\n        tempCourse.setInstructor(this);\n    }\n    ...\n}\n'})}),"\n",(0,r.jsxs)(e.admonition,{type:"info",children:[(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@OneToMany(mappedBy="instructor")\n'})}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"mappedBy"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Look at the instructor property in the Course class"}),"\n",(0,r.jsxs)(e.li,{children:["Use information from the Course class ",(0,r.jsx)(e.code,{children:"@JoinColumn"})]}),"\n",(0,r.jsx)(e.li,{children:"To help find associated courses for instructor"}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,r.jsxs)(e.ol,{start:"4",children:["\n",(0,r.jsx)(e.li,{children:"Create Main App"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"fetch-types-eager-vs-lazy",children:"Fetch Types: Eager vs Lazy"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Eager loading"})," will load all dependent entities","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"e.g. Load instructor and all of their courses at once"}),"\n",(0,r.jsx)(e.li,{children:"In our app, if we are searching for a course by keyword"}),"\n",(0,r.jsx)(e.li,{children:"Only want a list of matching courses"}),"\n",(0,r.jsx)(e.li,{children:"Eager loading would still load all students for each course, which is not good!"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.admonition,{type:"tip",children:[(0,r.jsx)(e.p,{children:"Best Practice: Only load data when absolutely needed"}),(0,r.jsx)(e.p,{children:"Use Lazy Loading rather than Eager Loading"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Lazy loading"})," will load the main entity first","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Load dependent entities on demand (lazy)"}),"\n",(0,r.jsx)(e.li,{children:"e.g. load only instructors and not their courses"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"When you lazy load, the data is only retrieved on demand"}),"\n",(0,r.jsxs)(e.li,{children:["However, this requires an open Hibernate session","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"need a connection to database to retrieve data"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["If the Hibernate session is closed and you attempt to retrieve lazy data","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Hibernate will throw an exception"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor")\npublic class Instructor {\n    ...\n    @OneToMany(fetch=FetchType.LAZY, mappedBy="instructor")\n    private List<Course> courses;\n    ...\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"default-fetch-types",children:"Default Fetch Types"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"@OneToOne"}),": ",(0,r.jsx)(e.code,{children:"FetchType.EAGER"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"@OneToMany"}),": ",(0,r.jsx)(e.code,{children:"FetchType.LAZY"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"@ManyToOne"}),": ",(0,r.jsx)(e.code,{children:"FetchType.EAGER"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"@ManyToMany"}),": ",(0,r.jsx)(e.code,{children:"FetchType.LAZY"})]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"overriding-default-fetch-type",children:"Overriding Default Fetch Type"}),"\n",(0,r.jsx)(e.p,{children:"e.g. Specifying the fetch type, overrides the defaults"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@ManyToOne(fetch=FetchType.LAZY)\n@JoinColumn(name="instructor_id")\nprivate Instructor instructor;\n'})}),"\n",(0,r.jsx)(e.h2,{id:"lazy-find-courses",children:"Lazy: Find Courses"}),"\n",(0,r.jsx)(e.p,{children:"e.g."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="instructor")\npublic class Instructor {\n    ...\n    // FetchType for @OneToMany defaults to lazy\n    @OneToMany(fetch=FetchType.LAZY, mappedBy=\u201cinstructor\u201d)\n    private List<Course> courses;\n    ...\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Override\npublic List<Course> findCoursesByInstructorId(int theId) {\n    // create query\n    TypedQuery<Course> query = entityManager.createQuery("from Course where instructor.id = :data", Course.class);\n    query.setParameter("data", theId);\n\n    // execute query\n    List<Course> courses = query.getResultList();\n\n    return courses;\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'private void findCoursesForInstructor(AppDAO appDAO) {\n    int theId = 1;\n\n    // Since fetch type for courses is lazy\n    // This will retrieve the instructor WITHOUT courses\n    // find the instructor\n    Instructor tempInstructor = appDAO.findInstructorById(theId);\n    System.out.println("tempInstructor: " + tempInstructor);\n\n    // find courses for instructor\n    List<Course> courses = appDAO.findCoursesByInstructorId(theId);\n\n    // associate the objects\n    tempInstructor.setCourses(courses);\n\n    System.out.println("the associated courses: " + tempInstructor.getCourses());\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"lazy-find-instructor-with-courses",children:"Lazy: Find Instructor with Courses"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Get instructor AND courses in a single query"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Override\npublic Instructor findInstructorByIdJoinFetch(int theId) {\n    // create query\n    TypedQuery<Instructor> query = entityManager.createQuery(\n        "select i from Instructor i "\n        + "JOIN FETCH i.courses "\n        + "where i.id = :data", Instructor.class);\n\n    query.setParameter("data", theId);\n\n    // execute query\n    Instructor instructor = query.getSingleResult();\n\n    return instructor;\n}\n'})}),"\n",(0,r.jsxs)(e.admonition,{type:"note",children:[(0,r.jsxs)(e.p,{children:["Even with Instructor\n",(0,r.jsx)(e.code,{children:"@OneToMany(fetchType=LAZY)"})]}),(0,r.jsx)(e.p,{children:"This code will still retrieve Instructor AND Courses"}),(0,r.jsx)(e.p,{children:"The JOIN FETCH is similar to EAGER loading"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'private void findInstructorWithCoursesJoinFetch(AppDAO appDAO) {\n    int theId = 1;\n\n    // find the instructor\n    System.out.println("Finding instructor id: " + theId);\n    Instructor tempInstructor = appDAO.findInstructorByIdJoinFetch(theId);\n\n    System.out.println("tempInstructor: " + tempInstructor);\n    System.out.println("the associated courses: " + tempInstructor.getCourses());\n\n    System.out.println("Done!");\n}\n'})}),"\n",(0,r.jsxs)(e.admonition,{type:"note",children:[(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"If you only need Instructor and no courses, then call:"}),"\n"]}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"appDAO.findInstructorById(...)\n"})}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"If you need Instructor AND courses, then call"}),"\n"]}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"appDAO.findInstructorByIdJoinFetch(...)\n"})})]}),"\n",(0,r.jsx)(e.h2,{id:"onetomany-update-instructor",children:"@OneToMany: Update Instructor"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Find an instructor by ID"}),"\n",(0,r.jsx)(e.li,{children:"Change the instructor\u2019s data by calling setter method(s)"}),"\n",(0,r.jsx)(e.li,{children:"Update the instructor using the DAO"}),"\n"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Add new DAO method to update instructor"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Override\n@Transactional\npublic void update(Instructor tempInstructor) {\n    //update an existing entity\n    entityManager.merge(tempInstructor);\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsxs)(e.li,{children:["Update ",(0,r.jsx)(e.strong,{children:"main app"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'private void updateInstructor(AppDAO appDAO) {\n    int theId = 1;\n\n    System.out.println("Finding instructor id: " + theId);\n    Instructor tempInstructor = appDAO.findInstructorById(theId);\n\n    // Change instructor\'s data\n    System.out.println("Updating instructor id: " + theId);\n    tempInstructor.setLastName("TESTER");\n\n    // Call DAO method to update database\n    appDAO.update(tempInstructor);\n\n    System.out.println("Done");\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"onetomany-update-course",children:"@OneToMany: Update Course"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Find a course by ID"}),"\n",(0,r.jsx)(e.li,{children:"Change the course\u2019s data by calling setter method(s)"}),"\n",(0,r.jsx)(e.li,{children:"Update the course using the DAO"}),"\n"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Add new DAO method to update course"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Override\n@Transactional\npublic void update(Course tempCourse) {\n    // update an existing entity\n    entityManager.merge(tempCourse);\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsxs)(e.li,{children:["Update ",(0,r.jsx)(e.strong,{children:"main app"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'private void updateCourse(AppDAO appDAO) {\n    int theId = 10;\n\n    System.out.println("Finding course id: " + theId);\n    Course tempCourse = appDAO.findCourseById(theId);\n\n    // Change course\'s data\n    System.out.println("Updating course id: " + theId);\n    tempCourse.setTitle("Enjoy the Simple Things");\n\n    // Call DAO method to update database\n    appDAO.update(tempCourse);\n\n    System.out.println("Done");\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"onetomany-delete-instructor",children:"@OneToMany: Delete Instructor"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Find an instructor by ID"}),"\n",(0,r.jsx)(e.li,{children:"Break association of all instructor\u2019s courses"}),"\n",(0,r.jsx)(e.li,{children:"Delete the instructor"}),"\n"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Add new DAO method to delete instructor"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Override\n@Transactional\npublic void deleteInstructorById(int theId) {\n    // retrieve the instructor\n    Instructor tempInstructor = entityManager.find(Instructor.class, theId);\n\n    List<Course> courses = tempInstructor.getCourses();\n\n    // break associations of all courses for instructor\n    for (Course tempCourse : courses) {\n        // Remove the instructor from the courses\n        tempCourse.setInstructor(null);\n    }\n\n    // delete the instructor\n    // not the associated course based on our cascade types\n    entityManager.remove(tempInstructor);\n}\n"})}),"\n",(0,r.jsxs)(e.admonition,{type:"danger",children:[(0,r.jsxs)(e.p,{children:["If you don\u2019t remove instructor from courses, then there is a ",(0,r.jsx)(e.strong,{children:"constraint violation"})]}),(0,r.jsx)(e.p,{children:"An instructor can not be deleted if it is referenced by a course"}),(0,r.jsx)(e.p,{children:"You must remove the instructor from the course first"})]}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsxs)(e.li,{children:["update ",(0,r.jsx)(e.strong,{children:"main app"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'private void deleteInstructor(AppDAO appDAO) {\n    int theId = 1;\n    System.out.println("Deleting instructor id: " + theId);\n\n    appDAO.deleteInstructorById(theId);\n\n    System.out.println("Done!");\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"onetomany-delete-course",children:"@OneToMany: Delete Course"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Delete the course by ID"}),"\n"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Add new DAO method to delete course"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AppDAOImpl.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"@Override\n@Transactional\npublic void deleteCourseById(int theId) {\n    // retrieve the course\n    Course tempCourse = entityManager.find(Course.class, theId);\n\n    // delete the course\n    entityManager.remove(tempCourse);\n}\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsxs)(e.li,{children:["update ",(0,r.jsx)(e.strong,{children:"main app"})]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CruddemoApplication.java"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'private void deleteCourseById(AppDAO appDAO) {\n    int theId = 10;\n    System.out.println("Deleting course id: " + theId);\n\n    appDAO.deleteCourseById(theId);\n\n    System.out.println("Done!");\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"onetomany-uni-directional",children:"@OneToMany: Uni-Directional"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"A course can have many reviews, uni-directionally"}),"\n",(0,r.jsx)(e.li,{children:"If you delete a course, also delete the reviews. So, apply cascading deletes!"}),"\n",(0,r.jsx)(e.li,{children:"Reviews without a course, have no meaning"}),"\n"]}),"\n",(0,r.jsx)(e.mermaid,{value:"flowchart LR\n\nA[Instructor] --\x3e B[Review]\nA --\x3e C[Review]\nA --\x3e D[Review]\nA --\x3e E[Review]\n\nstyle A fill:green,color:white;"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Development Process"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Prep Work - Define database tables"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"create-db.sql"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CREATE TABLE `review` (\n    `id` int(11) NOT NULL AUTO_INCREMENT,\n    `comment` varchar(256) DEFAULT NULL,\n    `course_id` int(11) DEFAULT NULL,\n    ...\n);\n\nCREATE TABLE `review` (\n    ...\n    KEY `FK_COURSE_ID_idx` (`course_id`),\n    CONSTRAINT `FK_COURSE`\n    FOREIGN KEY (`course_id`)\n    REFERENCES `course` (`id`)\n    ...\n);\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Create Review class"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="review")\npublic class Review {\n    @Id\n    @GeneratedValue(strategy=GenerationType.IDENTITY)\n    @Column(name="id")\n    private int id;\n\n    @Column(name="comment")\n    private String comment;\n...\n// constructors, getters / setters\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Update Course class"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="course")\npublic class Course {\n    ...\n    // add convenience methods for adding reviews\n    public void add(Review tempReview) {\n        if (reviews == null) {\n            reviews = new ArrayList<>();\n        }\n        reviews.add(tempReview);\n    }\n\n    @OneToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL)\n    @JoinColumn(name="course_id")\n    private List<Review> reviews;\n    // getter / setters\n    ...\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"manytomany",children:"@ManyToMany"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"e.g. Need to track which student is in which course and vice-versa"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"join-table",children:"Join Table"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["A join table is a table that provides a mapping between two tables.","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"It has foreign keys for each table to define the mapping relationship."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Development Process"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Prep Work - Define database tables"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"create-db.sql"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CREATE TABLE `course_student` (\n    `course_id` int(11) NOT NULL,\n    `student_id` int(11) NOT NULL,\n    PRIMARY KEY (`course_id`, `student_id`),\n    ...\n);\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"CREATE TABLE `course_student` (\n    ...\n    CONSTRAINT `FK_COURSE_05`\n    FOREIGN KEY (`course_id`)\n    REFERENCES `course` (`id`),\n    CONSTRAINT `FK_STUDENT`\n    FOREIGN KEY (`student_id`)\n    REFERENCES `student` (`id`)\n    ...\n);\n"})}),"\n",(0,r.jsxs)(e.ol,{start:"2",children:["\n",(0,r.jsx)(e.li,{children:"Update Course class"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="course")\npublic class Course {\n    ...\n    // Refers to \u201ccourse_id\u201d column in \u201ccourse_student\u201d join table\n    // Refers to \u201cstudent_id\u201d column in \u201ccourse_student\u201d join table\n    @ManyToMany\n    @JoinTable(\n        name="course_student",\n        joinColumns=@JoinColumn(name="course_id"),\n        inverseJoinColumns=@JoinColumn(name="student_id")\n    )\n    private List<Student> students;\n\n    // getter / setters\n    ...\n}\n'})}),"\n",(0,r.jsxs)(e.admonition,{type:"note",children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"@JoinTable"})," tells Hibernate"]}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Look at the course_id column in the course_student table"}),"\n",(0,r.jsx)(e.li,{children:"For other side (inverse), look at the student_id column in the course_student table"}),"\n",(0,r.jsx)(e.li,{children:"Use this information to find relationship between course and students"}),"\n"]})]}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:"Update Student class"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'@Entity\n@Table(name="student")\npublic class Student {\n    ...\n    // Refers to \u201ccourse_id\u201d column in \u201ccourse_student\u201d join table\n    @ManyToMany\n    @JoinTable(\n        name="course_student",\n        joinColumns=@JoinColumn(name="student_id"),\n        inverseJoinColumns=@JoinColumn(name="course_id")\n    )\n    private List<Course> courses;\n    // getter / setters\n    ...\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function l(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);
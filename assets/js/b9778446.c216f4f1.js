"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[256],{2613:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(4848),i=t(8453);const a={sidebar_position:2},c="Mocking with Mockito",r={id:"unit-testing/mocking-with-mockito",title:"Mocking with Mockito",description:"Spring Initializer Setup",source:"@site/docs/unit-testing/mocking-with-mockito.md",sourceDirName:"unit-testing",slug:"/unit-testing/mocking-with-mockito",permalink:"/java-spring-boot-notes/docs/unit-testing/mocking-with-mockito",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/java-spring-boot-notes/docs/unit-testing/mocking-with-mockito.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/java-spring-boot-notes/docs/unit-testing/introduction"},next:{title:"Unit Testing with Spring Boot & Mockito",permalink:"/java-spring-boot-notes/docs/unit-testing/unit-testing-spring-boot-mockito"}},o={},l=[{value:"Spring Initializer Setup",id:"spring-initializer-setup",level:2},{value:"Simple Unit Test for a Business Service",id:"simple-unit-test-for-a-business-service",level:2},{value:"Business Service calls a data service",id:"business-service-calls-a-data-service",level:2},{value:"More Refactoring",id:"more-refactoring",level:3},{value:"Multiple Return Values &amp; Specific Argument Matchers",id:"multiple-return-values--specific-argument-matchers",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mocking-with-mockito",children:"Mocking with Mockito"})}),"\n",(0,s.jsx)(n.h2,{id:"spring-initializer-setup",children:"Spring Initializer Setup"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Web"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"simple-unit-test-for-a-business-service",children:"Simple Unit Test for a Business Service"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BusinessImpl.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"public class BusinessImpl {\n    public int calculateSum(int[] data){\n        int sum = 0;\n        for(int value:data) {\n            sum += value;\n        }\n        return sum;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BusinessTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import static org.junit.Assert.*;\n\npublic class BusinessTest {\n    @Test\n    public void calculateSum_basic() {\n        BusinessImpl business = new BusinessImpl()\n        int actualResult = business.calculateSum(new int[] {1, 2, 3});\n        int expectedResult = 6;\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void calculateSum_empty() {\n        BusinessImpl business = new BusinessImpl()\n        int actualResult = business.calculateSum(new int[] { });\n        int expectedResult = 0;\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void calculateSum_onevalue() {\n        BusinessImpl business = new BusinessImpl()\n        int actualResult = business.calculateSum(new int[] { 5 });\n        int expectedResult = 5;\n        assertEquals(expectedResult, actualResult);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"business-service-calls-a-data-service",children:"Business Service calls a data service"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SomeDataService.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"public interface SomeDataService {\n    int[] retrieveAllData();\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BusinessImpl.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"public class BusinessImpl {\n\n    private SomeDataService someDataService;\n\n    public void setSomeDataService(SomeDataService someDataService){\n        this.someDataService = someDataService;\n    }\n\n    public int calculateSumUsingDataService(){\n        int sum = 0;\n        int[] data = someDataService.retrieveAllData();\n        for(int value:data) {\n            sum += value;\n        }\n        return sum;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BusinessMockTest.java"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Using Mockito Here"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class BusinessMockTest {\n\n    BusinessImpl business = new BusinessImpl()\n    SomeDataService dataServiceMock = mock(SomeDataService.class);\n\n    @BeforeEach\n    public void before() {\n        business.setSomeDataService(dataServiceMock)\n    }\n\n    @Test\n    public void calculateSumUsingDataService_basic() {\n        when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { 1, 2, 3 })\n        int actualResult = business.calculateSumUsingDataService();\n        int expectedResult = 6;\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void calculateSumUsingDataService_empty() {\n        when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { })\n        int actualResult = business.calculateSumUsingDataService();\n        int expectedResult = 0;\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void calculateSumUsingDataService_onevalue() {\n        when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { 5 })\n        int actualResult = business.calculateSumUsingDataService();\n        int expectedResult = 5;\n        assertEquals(expectedResult, actualResult);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"more-refactoring",children:"More Refactoring"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"@Mock"}),", ",(0,s.jsx)(n.code,{children:"@InjectMocks"}),", and ",(0,s.jsx)(n.code,{children:"@ExtendWith(MockitoExtension.class)"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Continue from the previous example with further improvements:"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"BusinessMockTest.java"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Using Mockito Here"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\npublic class BusinessMockTest {\n\n    @InjectMocks\n    BusinessImpl business\n\n    @Mock\n    SomeDataService dataServiceMock;\n\n    @Test\n    public void calculateSumUsingDataService_basic() {\n        when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { 1, 2, 3 })\n        assertEquals(6, business.calculateSumUsingDataService());\n    }\n\n    @Test\n    public void calculateSumUsingDataService_empty() {\n        when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { })\n        assertEquals(0, business.calculateSumUsingDataService(););\n    }\n\n    @Test\n    public void calculateSumUsingDataService_onevalue() {\n        when(dataServiceMock.retrieveAllData()).thenReturn(new int[] { 5 })\n        assertEquals(5, business.calculateSumUsingDataService());\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["With the ",(0,s.jsx)(n.code,{children:"@ExtendWith(MockitoExtension.class)"})," annotation, Mockito automatically handles the creation and injection of mocks.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Thus, ",(0,s.jsx)(n.code,{children:"@BeforeEach"})," is no longer needed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@InjectMocks"})," is an annotation used in Mockito to automatically inject mock objects into the class being tested. It simplifies the process of setting up and wiring the dependencies of the class under test.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatic Injection: Mockito will automatically create an instance of the class under test and inject the mock dependencies into it."}),"\n",(0,s.jsxs)(n.li,{children:["Dependencies Injection: It looks for fields in the class annotated with @InjectMocks that are of the same type as the mocks created using the ",(0,s.jsx)(n.code,{children:"@Mock"})," annotation and injects them."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@Mock"})," is an annotation used in Mockito to create mock objects. Mock objects are simulated objects that mimic the behavior of real objects in controlled ways. This is useful for isolating the class under test by providing it with mock dependencies instead of real ones.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Dependency Isolation: Mock objects allow you to test a class without relying on the behavior of its dependencies. This ensures that tests remain focused on the class being tested."}),"\n",(0,s.jsxs)(n.li,{children:["Behavior Specification: With mock objects, you can specify the behavior of methods in the mocked dependency using methods like ",(0,s.jsx)(n.code,{children:"when(...).thenReturn(...)"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Interaction Verification: You can verify that certain interactions occurred with the mock objects, such as checking that a method was called a specific number of times."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"multiple-return-values--specific-argument-matchers",children:"Multiple Return Values & Specific Argument Matchers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ListMockTest.java"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\n\npublic class ListMockTest {\n    List<String> mock = mock(List.class);\n\n    @Test\n    public void size_test() {\n        when(mock.size()).thenReturn(5);\n        assertEquals(5, mock.size());\n    }\n\n    @Test\n    public void returnDifferentValues_test() {\n        when(mock.size()).thenReturn(5).thenReturn(10);\n        assertEquals(5, mock.size());\n        assertEquals(10, mock.size());\n    }\n\n    @Test\n    public void returnWithParameters_test() {\n        when(mock.get(0)).thenReturn("in28Minutes");\n        assertEquals("in28Minutes", mock.get(0));\n    }\n\n    @Test\n    public void returnWithGenericParameters_test() {\n        when(mock.get(anyInt())).thenReturn("in28Minutes");\n        assertEquals("in28Minutes", mock.get(0));\n    }\n\n    @Test\n    public void verificationBasics_test() {\n        //SUT\n        String value = mock.get(0);\n\n        verify(mock).get(0); // success\n        verify(mock).get(anyInt()); // success\n        verify(mock, times(1)).get(anyInt()); // success\n        verify(mock, atLeast(1)).get(anyInt()); // success\n        verify(mock, atMost(1)).get(anyInt()); // success\n        verify(mock, never()).get(2); // success\n    }\n\n    @Test\n    public void argumentCapturing_test() {\n        mock.add("SomeString");\n\n        // Used to capture the argument passed to the add method of the mock list.\n        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n        // Ensures that the add method was called with the captured argument.\n        verify(mock).add(captor.capture());\n\n        // asserts that the captured argument is equal to "SomeString".\n        assertsEquals("SomeString", captor.getValue());\n    }\n\n    @Test\n    public void multipleArgumentCapturing_test() {\n        mock.add("SomeString1");\n        mock.add("SomeString2");\n\n        // Used to capture the argument passed to the add method of the mock list.\n        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\n        // Ensures that the add method was called with the captured argument.\n        verify(mock, times(2)).add(captor.capture());\n\n        List<String> allValues = captor.getAllValues();\n\n        // asserts that the captured argument is equal to "SomeString".\n        assertsEquals("SomeString1", allValues.get(0));\n        assertsEquals("SomeString2", allValues.get(1));\n    }\n\n    @Test\n    public void mocking_test() {\n        ArrayList arrayListMock = mock(ArrayList.class);\n        arrayListMock.get(0); // null\n        arrayListMock.size(); // 0\n        arrayListMock.add("Test");\n        arrayListMock.add("Test2");\n        arrayListMock.size(); // still 0\n        when(arrayListMock.size()).thenReturn(5);\n        arrayListMock.size(); // 5\n    }\n\n    @Test\n    public void spying_test() {\n        ArrayList<String> arrayListSpy = spy(ArrayList.class);\n        arrayListSpy.add("Test0");\n        assertEquals("Test0", arrayListSpy.get(0)); // Test0\n        assertEquals(1, arrayListSpy.size()); // 1\n\n        arrayListSpy.add("Test");\n        arrayListSpy.add("Test2");\n        assertEquals(3, arrayListSpy.size()); // 3\n\n        when(arrayListSpy.size()).thenReturn(5);\n        assertEquals(5, arrayListSpy.size()); // 5\n\n        arrayListSpy.add("Test4");\n        assertEquals(5, arrayListSpy.size()); // still 5\n\n        verify(arrayListSpy).add("Test4"); //success\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"anyInt()"})," is an argument matcher"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"verify"})," is used to confirm that specific interactions with mock objects have occurred. It allows you to ensure that certain methods were called with the expected parameters a specified number of times. This is especially useful for validating the behavior of the system under test (SUT) and ensuring it interacts with its dependencies as expected.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Interaction Verification: You can use verify to check if a specific method was called on a mock object."}),"\n",(0,s.jsx)(n.li,{children:"Parameter Matching: You can use argument matchers (like anyInt()) to verify the parameters passed to the method."}),"\n",(0,s.jsx)(n.li,{children:"Call Frequency: You can specify how many times you expect the method to be called (e.g., times(1), never(), atLeast(1), atMost(1))."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Unlike mocks, use ",(0,s.jsx)(n.code,{children:"spy"})," to directly deploy real world action to see how it works."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(6540);const i={},a=s.createContext(i);function c(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);